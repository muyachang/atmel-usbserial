
rram-usbserial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  0000115a  000011ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000115a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000158  0080011e  0080011e  0000120c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000123c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000626b  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001afa  00000000  00000000  00007807  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000036a8  00000000  00000000  00009301  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009f0  00000000  00000000  0000c9ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023b4  00000000  00000000  0000d39c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ac7  00000000  00000000  0000f750  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004e8  00000000  00000000  00013217  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	89 c0       	rjmp	.+274    	; 0x114 <__ctors_end>
       2:	00 00       	nop
       4:	a3 c0       	rjmp	.+326    	; 0x14c <__bad_interrupt>
       6:	00 00       	nop
       8:	a1 c0       	rjmp	.+322    	; 0x14c <__bad_interrupt>
       a:	00 00       	nop
       c:	9f c0       	rjmp	.+318    	; 0x14c <__bad_interrupt>
       e:	00 00       	nop
      10:	9d c0       	rjmp	.+314    	; 0x14c <__bad_interrupt>
      12:	00 00       	nop
      14:	9b c0       	rjmp	.+310    	; 0x14c <__bad_interrupt>
      16:	00 00       	nop
      18:	99 c0       	rjmp	.+306    	; 0x14c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	97 c0       	rjmp	.+302    	; 0x14c <__bad_interrupt>
      1e:	00 00       	nop
      20:	95 c0       	rjmp	.+298    	; 0x14c <__bad_interrupt>
      22:	00 00       	nop
      24:	3a c1       	rjmp	.+628    	; 0x29a <__vector_9>
      26:	00 00       	nop
      28:	42 c1       	rjmp	.+644    	; 0x2ae <__vector_10>
      2a:	00 00       	nop
      2c:	05 c4       	rjmp	.+2058   	; 0x838 <__vector_11>
      2e:	00 00       	nop
      30:	ad c4       	rjmp	.+2394   	; 0x98c <__vector_12>
      32:	00 00       	nop
      34:	8b c0       	rjmp	.+278    	; 0x14c <__bad_interrupt>
      36:	00 00       	nop
      38:	89 c0       	rjmp	.+274    	; 0x14c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	87 c0       	rjmp	.+270    	; 0x14c <__bad_interrupt>
      3e:	00 00       	nop
      40:	85 c0       	rjmp	.+266    	; 0x14c <__bad_interrupt>
      42:	00 00       	nop
      44:	83 c0       	rjmp	.+262    	; 0x14c <__bad_interrupt>
      46:	00 00       	nop
      48:	81 c0       	rjmp	.+258    	; 0x14c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7f c0       	rjmp	.+254    	; 0x14c <__bad_interrupt>
      4e:	00 00       	nop
      50:	7d c0       	rjmp	.+250    	; 0x14c <__bad_interrupt>
      52:	00 00       	nop
      54:	7b c0       	rjmp	.+246    	; 0x14c <__bad_interrupt>
      56:	00 00       	nop
      58:	79 c0       	rjmp	.+242    	; 0x14c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f3 c2       	rjmp	.+1510   	; 0x644 <__vector_23>
      5e:	00 00       	nop
      60:	75 c0       	rjmp	.+234    	; 0x14c <__bad_interrupt>
      62:	00 00       	nop
      64:	73 c0       	rjmp	.+230    	; 0x14c <__bad_interrupt>
      66:	00 00       	nop
      68:	71 c0       	rjmp	.+226    	; 0x14c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6f c0       	rjmp	.+222    	; 0x14c <__bad_interrupt>
      6e:	00 00       	nop
      70:	6d c0       	rjmp	.+218    	; 0x14c <__bad_interrupt>
      72:	00 00       	nop
      74:	2b 05       	cpc	r18, r11
      76:	47 05       	cpc	r20, r7
      78:	38 06       	cpc	r3, r24
      7a:	47 05       	cpc	r20, r7
      7c:	38 06       	cpc	r3, r24
      7e:	7f 05       	cpc	r23, r15
      80:	a3 05       	cpc	r26, r3
      82:	38 06       	cpc	r3, r24
      84:	f6 05       	cpc	r31, r6
      86:	09 06       	cpc	r0, r25

00000088 <ProductString>:
      88:	28 03 49 00 43 00 53 00 52 00 4c 00 20 00 52 00     (.I.C.S.R.L. .R.
      98:	52 00 41 00 4d 00 20 00 54 00 65 00 73 00 74 00     R.A.M. .T.e.s.t.
      a8:	63 00 68 00 69 00 70 00 00 00                       c.h.i.p...

000000b2 <ManufacturerString>:
      b2:	0c 03 49 00 43 00 53 00 52 00 4c 00 00 00           ..I.C.S.R.L...

000000c0 <LanguageString>:
      c0:	04 03 09 04                                         ....

000000c4 <ConfigurationDescriptor>:
      c4:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      d4:	01 00 05 24 00 01 10 04 24 02 06 05 24 06 00 01     ...$....$...$...
      e4:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      f4:	07 05 04 02 40 00 01 07 05 83 02 40 00 01           ....@......@..

00000102 <DeviceDescriptor>:
     102:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
     112:	dc 01                                               ..

00000114 <__ctors_end>:
     114:	11 24       	eor	r1, r1
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	d2 e0       	ldi	r29, 0x02	; 2
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
     120:	11 e0       	ldi	r17, 0x01	; 1
     122:	a0 e0       	ldi	r26, 0x00	; 0
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	ea e5       	ldi	r30, 0x5A	; 90
     128:	f1 e1       	ldi	r31, 0x11	; 17
     12a:	02 c0       	rjmp	.+4      	; 0x130 <__do_copy_data+0x10>
     12c:	05 90       	lpm	r0, Z+
     12e:	0d 92       	st	X+, r0
     130:	ae 31       	cpi	r26, 0x1E	; 30
     132:	b1 07       	cpc	r27, r17
     134:	d9 f7       	brne	.-10     	; 0x12c <__do_copy_data+0xc>

00000136 <__do_clear_bss>:
     136:	22 e0       	ldi	r18, 0x02	; 2
     138:	ae e1       	ldi	r26, 0x1E	; 30
     13a:	b1 e0       	ldi	r27, 0x01	; 1
     13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
     13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
     140:	a6 37       	cpi	r26, 0x76	; 118
     142:	b2 07       	cpc	r27, r18
     144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>
     146:	b8 d1       	rcall	.+880    	; 0x4b8 <main>
     148:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <_exit>

0000014c <__bad_interrupt>:
     14c:	59 cf       	rjmp	.-334    	; 0x0 <__vectors>

0000014e <RingBuffer_Insert>:
      ack = SW_DP_ACK_WAIT;
      do {
        SW_Send(request, 8); // Request
        SW_PulseClock(1); // TM
        if((ack = SW_Receive(3)) == SW_DP_ACK_WAIT) // Ack
          SW_PulseClock(1); // TM
     14e:	fc 01       	movw	r30, r24
     150:	e0 58       	subi	r30, 0x80	; 128
     152:	ff 4f       	sbci	r31, 0xFF	; 255
     154:	a0 81       	ld	r26, Z
     156:	b1 81       	ldd	r27, Z+1	; 0x01
     158:	6c 93       	st	X, r22
     15a:	a0 81       	ld	r26, Z
     15c:	b1 81       	ldd	r27, Z+1	; 0x01
     15e:	9d 01       	movw	r18, r26
     160:	2f 5f       	subi	r18, 0xFF	; 255
     162:	3f 4f       	sbci	r19, 0xFF	; 255
     164:	31 83       	std	Z+1, r19	; 0x01
     166:	20 83       	st	Z, r18
     168:	2e 17       	cp	r18, r30
     16a:	3f 07       	cpc	r19, r31
     16c:	21 f4       	brne	.+8      	; 0x176 <RingBuffer_Insert+0x28>
     16e:	12 96       	adiw	r26, 0x02	; 2
     170:	9c 93       	st	X, r25
     172:	8e 93       	st	-X, r24
     174:	11 97       	sbiw	r26, 0x01	; 1
     176:	2f b7       	in	r18, 0x3f	; 63
     178:	f8 94       	cli
     17a:	fc 01       	movw	r30, r24
     17c:	ec 57       	subi	r30, 0x7C	; 124
     17e:	ff 4f       	sbci	r31, 0xFF	; 255
     180:	80 81       	ld	r24, Z
     182:	91 81       	ldd	r25, Z+1	; 0x01
     184:	01 96       	adiw	r24, 0x01	; 1
     186:	91 83       	std	Z+1, r25	; 0x01
     188:	80 83       	st	Z, r24
     18a:	2f bf       	out	0x3f, r18	; 63
     18c:	08 95       	ret

0000018e <RingBuffer_Remove>:
     18e:	dc 01       	movw	r26, r24
     190:	ae 57       	subi	r26, 0x7E	; 126
     192:	bf 4f       	sbci	r27, 0xFF	; 255
     194:	ed 91       	ld	r30, X+
     196:	fc 91       	ld	r31, X
     198:	11 97       	sbiw	r26, 0x01	; 1
     19a:	41 91       	ld	r20, Z+
     19c:	11 96       	adiw	r26, 0x01	; 1
     19e:	fc 93       	st	X, r31
     1a0:	ee 93       	st	-X, r30
     1a2:	9c 01       	movw	r18, r24
     1a4:	20 58       	subi	r18, 0x80	; 128
     1a6:	3f 4f       	sbci	r19, 0xFF	; 255
     1a8:	e2 17       	cp	r30, r18
     1aa:	f3 07       	cpc	r31, r19
     1ac:	11 f4       	brne	.+4      	; 0x1b2 <RingBuffer_Remove+0x24>
     1ae:	8d 93       	st	X+, r24
     1b0:	9c 93       	st	X, r25
     1b2:	5f b7       	in	r21, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	fc 01       	movw	r30, r24
     1b8:	ec 57       	subi	r30, 0x7C	; 124
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	20 81       	ld	r18, Z
     1be:	31 81       	ldd	r19, Z+1	; 0x01
     1c0:	21 50       	subi	r18, 0x01	; 1
     1c2:	31 09       	sbc	r19, r1
     1c4:	31 83       	std	Z+1, r19	; 0x01
     1c6:	20 83       	st	Z, r18
     1c8:	5f bf       	out	0x3f, r21	; 63
     1ca:	84 2f       	mov	r24, r20
     1cc:	08 95       	ret

000001ce <I2C_StartTransmission>:
     1ce:	51 9a       	sbi	0x0a, 1	; 10
     1d0:	50 9a       	sbi	0x0a, 0	; 10
     1d2:	59 9a       	sbi	0x0b, 1	; 11
     1d4:	58 9a       	sbi	0x0b, 0	; 11
     1d6:	59 98       	cbi	0x0b, 1	; 11
     1d8:	58 98       	cbi	0x0b, 0	; 11
     1da:	08 95       	ret

000001dc <I2C_EndTransmission>:
     1dc:	59 98       	cbi	0x0b, 1	; 11
     1de:	58 9a       	sbi	0x0b, 0	; 11
     1e0:	59 9a       	sbi	0x0b, 1	; 11
     1e2:	51 98       	cbi	0x0a, 1	; 10
     1e4:	50 98       	cbi	0x0a, 0	; 10
     1e6:	08 95       	ret

000001e8 <I2C_SendByte>:
     1e8:	27 e0       	ldi	r18, 0x07	; 7
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	ac 01       	movw	r20, r24
     1f0:	02 2e       	mov	r0, r18
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <I2C_SendByte+0x10>
     1f4:	55 95       	asr	r21
     1f6:	47 95       	ror	r20
     1f8:	0a 94       	dec	r0
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <I2C_SendByte+0xc>
     1fc:	40 ff       	sbrs	r20, 0
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <__DATA_REGION_LENGTH__+0x4>
     200:	59 9a       	sbi	0x0b, 1	; 11
     202:	01 c0       	rjmp	.+2      	; 0x206 <__DATA_REGION_LENGTH__+0x6>
     204:	59 98       	cbi	0x0b, 1	; 11
     206:	58 9a       	sbi	0x0b, 0	; 11
     208:	58 98       	cbi	0x0b, 0	; 11
     20a:	21 50       	subi	r18, 0x01	; 1
     20c:	31 09       	sbc	r19, r1
     20e:	78 f7       	brcc	.-34     	; 0x1ee <I2C_SendByte+0x6>
     210:	59 9a       	sbi	0x0b, 1	; 11
     212:	51 98       	cbi	0x0a, 1	; 10
     214:	58 9a       	sbi	0x0b, 0	; 11
     216:	89 b1       	in	r24, 0x09	; 9
     218:	58 98       	cbi	0x0b, 0	; 11
     21a:	51 9a       	sbi	0x0a, 1	; 10
     21c:	86 95       	lsr	r24
     21e:	81 70       	andi	r24, 0x01	; 1
     220:	08 95       	ret

00000222 <PM_UpdateReg>:
     222:	0f 93       	push	r16
     224:	1f 93       	push	r17
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	18 2f       	mov	r17, r24
     22c:	06 2f       	mov	r16, r22
     22e:	d4 2f       	mov	r29, r20
     230:	ce df       	rcall	.-100    	; 0x1ce <I2C_StartTransmission>
     232:	88 e7       	ldi	r24, 0x78	; 120
     234:	d9 df       	rcall	.-78     	; 0x1e8 <I2C_SendByte>
     236:	81 2f       	mov	r24, r17
     238:	d7 df       	rcall	.-82     	; 0x1e8 <I2C_SendByte>
     23a:	c9 df       	rcall	.-110    	; 0x1ce <I2C_StartTransmission>
     23c:	89 e7       	ldi	r24, 0x79	; 121
     23e:	d4 df       	rcall	.-88     	; 0x1e8 <I2C_SendByte>
     240:	59 9a       	sbi	0x0b, 1	; 11
     242:	51 98       	cbi	0x0a, 1	; 10
     244:	27 e0       	ldi	r18, 0x07	; 7
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	c0 e0       	ldi	r28, 0x00	; 0
     24a:	41 e0       	ldi	r20, 0x01	; 1
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	58 9a       	sbi	0x0b, 0	; 11
     250:	49 9b       	sbis	0x09, 1	; 9
     252:	07 c0       	rjmp	.+14     	; 0x262 <PM_UpdateReg+0x40>
     254:	ca 01       	movw	r24, r20
     256:	02 2e       	mov	r0, r18
     258:	01 c0       	rjmp	.+2      	; 0x25c <PM_UpdateReg+0x3a>
     25a:	88 0f       	add	r24, r24
     25c:	0a 94       	dec	r0
     25e:	ea f7       	brpl	.-6      	; 0x25a <PM_UpdateReg+0x38>
     260:	02 c0       	rjmp	.+4      	; 0x266 <PM_UpdateReg+0x44>
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	c8 2b       	or	r28, r24
     268:	58 98       	cbi	0x0b, 0	; 11
     26a:	21 50       	subi	r18, 0x01	; 1
     26c:	31 09       	sbc	r19, r1
     26e:	78 f7       	brcc	.-34     	; 0x24e <PM_UpdateReg+0x2c>
     270:	59 98       	cbi	0x0b, 1	; 11
     272:	51 9a       	sbi	0x0a, 1	; 10
     274:	58 9a       	sbi	0x0b, 0	; 11
     276:	58 98       	cbi	0x0b, 0	; 11
     278:	59 9a       	sbi	0x0b, 1	; 11
     27a:	b0 df       	rcall	.-160    	; 0x1dc <I2C_EndTransmission>
     27c:	a8 df       	rcall	.-176    	; 0x1ce <I2C_StartTransmission>
     27e:	88 e7       	ldi	r24, 0x78	; 120
     280:	b3 df       	rcall	.-154    	; 0x1e8 <I2C_SendByte>
     282:	81 2f       	mov	r24, r17
     284:	b1 df       	rcall	.-158    	; 0x1e8 <I2C_SendByte>
     286:	8d 2f       	mov	r24, r29
     288:	80 95       	com	r24
     28a:	8c 23       	and	r24, r28
     28c:	80 2b       	or	r24, r16
     28e:	ac df       	rcall	.-168    	; 0x1e8 <I2C_SendByte>
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	1f 91       	pop	r17
     296:	0f 91       	pop	r16
     298:	a1 cf       	rjmp	.-190    	; 0x1dc <I2C_EndTransmission>

0000029a <__vector_9>:
     29a:	1f 92       	push	r1
     29c:	0f 92       	push	r0
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	0f 92       	push	r0
     2a2:	11 24       	eor	r1, r1
     2a4:	0f 90       	pop	r0
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	0f 90       	pop	r0
     2aa:	1f 90       	pop	r1
     2ac:	18 95       	reti

000002ae <__vector_10>:
     2ae:	1f 92       	push	r1
     2b0:	0f 92       	push	r0
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	0f 92       	push	r0
     2b6:	11 24       	eor	r1, r1
     2b8:	2f 93       	push	r18
     2ba:	3f 93       	push	r19
     2bc:	4f 93       	push	r20
     2be:	5f 93       	push	r21
     2c0:	6f 93       	push	r22
     2c2:	7f 93       	push	r23
     2c4:	8f 93       	push	r24
     2c6:	9f 93       	push	r25
     2c8:	af 93       	push	r26
     2ca:	bf 93       	push	r27
     2cc:	ef 93       	push	r30
     2ce:	ff 93       	push	r31
     2d0:	32 9b       	sbis	0x06, 2	; 6
     2d2:	28 c0       	rjmp	.+80     	; 0x324 <__stack+0x25>
     2d4:	4f e1       	ldi	r20, 0x1F	; 31
     2d6:	63 e1       	ldi	r22, 0x13	; 19
     2d8:	8a e0       	ldi	r24, 0x0A	; 10
     2da:	a3 df       	rcall	.-186    	; 0x222 <PM_UpdateReg>
     2dc:	4f e1       	ldi	r20, 0x1F	; 31
     2de:	68 e1       	ldi	r22, 0x18	; 24
     2e0:	8e e0       	ldi	r24, 0x0E	; 14
     2e2:	9f df       	rcall	.-194    	; 0x222 <PM_UpdateReg>
     2e4:	4f e1       	ldi	r20, 0x1F	; 31
     2e6:	6d e1       	ldi	r22, 0x1D	; 29
     2e8:	8c e0       	ldi	r24, 0x0C	; 12
     2ea:	9b df       	rcall	.-202    	; 0x222 <PM_UpdateReg>
     2ec:	4f e1       	ldi	r20, 0x1F	; 31
     2ee:	6b e0       	ldi	r22, 0x0B	; 11
     2f0:	80 e1       	ldi	r24, 0x10	; 16
     2f2:	97 df       	rcall	.-210    	; 0x222 <PM_UpdateReg>
     2f4:	44 e0       	ldi	r20, 0x04	; 4
     2f6:	64 e0       	ldi	r22, 0x04	; 4
     2f8:	85 e0       	ldi	r24, 0x05	; 5
     2fa:	93 df       	rcall	.-218    	; 0x222 <PM_UpdateReg>
     2fc:	44 e0       	ldi	r20, 0x04	; 4
     2fe:	64 e0       	ldi	r22, 0x04	; 4
     300:	86 e0       	ldi	r24, 0x06	; 6
     302:	8f df       	rcall	.-226    	; 0x222 <PM_UpdateReg>
     304:	40 e8       	ldi	r20, 0x80	; 128
     306:	60 e8       	ldi	r22, 0x80	; 128
     308:	84 e0       	ldi	r24, 0x04	; 4
     30a:	8b df       	rcall	.-234    	; 0x222 <PM_UpdateReg>
     30c:	40 e8       	ldi	r20, 0x80	; 128
     30e:	60 e8       	ldi	r22, 0x80	; 128
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	87 df       	rcall	.-242    	; 0x222 <PM_UpdateReg>
     314:	40 e8       	ldi	r20, 0x80	; 128
     316:	60 e8       	ldi	r22, 0x80	; 128
     318:	82 e0       	ldi	r24, 0x02	; 2
     31a:	83 df       	rcall	.-250    	; 0x222 <PM_UpdateReg>
     31c:	40 e8       	ldi	r20, 0x80	; 128
     31e:	60 e8       	ldi	r22, 0x80	; 128
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	19 c0       	rjmp	.+50     	; 0x356 <__stack+0x57>
     324:	32 99       	sbic	0x06, 2	; 6
     326:	18 c0       	rjmp	.+48     	; 0x358 <__stack+0x59>
     328:	40 e8       	ldi	r20, 0x80	; 128
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	79 df       	rcall	.-270    	; 0x222 <PM_UpdateReg>
     330:	40 e8       	ldi	r20, 0x80	; 128
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	82 e0       	ldi	r24, 0x02	; 2
     336:	75 df       	rcall	.-278    	; 0x222 <PM_UpdateReg>
     338:	40 e8       	ldi	r20, 0x80	; 128
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	83 e0       	ldi	r24, 0x03	; 3
     33e:	71 df       	rcall	.-286    	; 0x222 <PM_UpdateReg>
     340:	44 e0       	ldi	r20, 0x04	; 4
     342:	60 e0       	ldi	r22, 0x00	; 0
     344:	85 e0       	ldi	r24, 0x05	; 5
     346:	6d df       	rcall	.-294    	; 0x222 <PM_UpdateReg>
     348:	44 e0       	ldi	r20, 0x04	; 4
     34a:	60 e0       	ldi	r22, 0x00	; 0
     34c:	86 e0       	ldi	r24, 0x06	; 6
     34e:	69 df       	rcall	.-302    	; 0x222 <PM_UpdateReg>
     350:	40 e8       	ldi	r20, 0x80	; 128
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	84 e0       	ldi	r24, 0x04	; 4
     356:	65 df       	rcall	.-310    	; 0x222 <PM_UpdateReg>
     358:	ff 91       	pop	r31
     35a:	ef 91       	pop	r30
     35c:	bf 91       	pop	r27
     35e:	af 91       	pop	r26
     360:	9f 91       	pop	r25
     362:	8f 91       	pop	r24
     364:	7f 91       	pop	r23
     366:	6f 91       	pop	r22
     368:	5f 91       	pop	r21
     36a:	4f 91       	pop	r20
     36c:	3f 91       	pop	r19
     36e:	2f 91       	pop	r18
     370:	0f 90       	pop	r0
     372:	0f be       	out	0x3f, r0	; 63
     374:	0f 90       	pop	r0
     376:	1f 90       	pop	r1
     378:	18 95       	reti

0000037a <SetupHardware>:
     37a:	84 b7       	in	r24, 0x34	; 52
     37c:	87 7f       	andi	r24, 0xF7	; 247
     37e:	84 bf       	out	0x34, r24	; 52
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	f8 94       	cli
     384:	a8 95       	wdr
     386:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     38a:	88 61       	ori	r24, 0x18	; 24
     38c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     390:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     394:	0f be       	out	0x3f, r0	; 63
     396:	80 e9       	ldi	r24, 0x90	; 144
     398:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
     39c:	2f b7       	in	r18, 0x3f	; 63
     39e:	f8 94       	cli
     3a0:	86 ee       	ldi	r24, 0xE6	; 230
     3a2:	91 e0       	ldi	r25, 0x01	; 1
     3a4:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <USBtoUSART_Buffer+0x81>
     3a8:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <USBtoUSART_Buffer+0x80>
     3ac:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <USBtoUSART_Buffer+0x83>
     3b0:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <USBtoUSART_Buffer+0x82>
     3b4:	2f bf       	out	0x3f, r18	; 63
     3b6:	2f b7       	in	r18, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	80 e6       	ldi	r24, 0x60	; 96
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <USARTtoUSB_Buffer+0x81>
     3c2:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <USARTtoUSB_Buffer+0x80>
     3c6:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <USARTtoUSB_Buffer+0x83>
     3ca:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <USARTtoUSB_Buffer+0x82>
     3ce:	2f bf       	out	0x3f, r18	; 63
     3d0:	78 94       	sei
     3d2:	2c 9a       	sbi	0x05, 4	; 5
     3d4:	24 9a       	sbi	0x04, 4	; 4
     3d6:	2d 9a       	sbi	0x05, 5	; 5
     3d8:	25 9a       	sbi	0x04, 5	; 4
     3da:	2e 9a       	sbi	0x05, 6	; 5
     3dc:	26 9a       	sbi	0x04, 6	; 4
     3de:	5f 9a       	sbi	0x0b, 7	; 11
     3e0:	57 9a       	sbi	0x0a, 7	; 10
     3e2:	5e 9a       	sbi	0x0b, 6	; 11
     3e4:	56 9a       	sbi	0x0a, 6	; 10
     3e6:	19 d2       	rcall	.+1074   	; 0x81a <USB_Init>
     3e8:	87 e6       	ldi	r24, 0x67	; 103
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7fc0cd>
     3f0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7fc0cc>
     3f4:	86 e0       	ldi	r24, 0x06	; 6
     3f6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7fc0ca>
     3fa:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7fc0c8>
     3fe:	88 e1       	ldi	r24, 0x18	; 24
     400:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7fc0c9>
     404:	53 9a       	sbi	0x0a, 3	; 10
     406:	5a 9a       	sbi	0x0b, 2	; 11
     408:	84 b1       	in	r24, 0x04	; 4
     40a:	86 60       	ori	r24, 0x06	; 6
     40c:	84 b9       	out	0x04, r24	; 4
     40e:	84 b1       	in	r24, 0x04	; 4
     410:	86 7f       	andi	r24, 0xF6	; 246
     412:	84 b9       	out	0x04, r24	; 4
     414:	85 b1       	in	r24, 0x05	; 5
     416:	89 60       	ori	r24, 0x09	; 9
     418:	85 b9       	out	0x05, r24	; 5
     41a:	8c e5       	ldi	r24, 0x5C	; 92
     41c:	8c bd       	out	0x2c, r24	; 44
     41e:	8d b5       	in	r24, 0x2d	; 45
     420:	81 60       	ori	r24, 0x01	; 1
     422:	8d bd       	out	0x2d, r24	; 45
     424:	46 9a       	sbi	0x08, 6	; 8
     426:	3e 9a       	sbi	0x07, 6	; 7
     428:	47 9a       	sbi	0x08, 7	; 8
     42a:	3f 9a       	sbi	0x07, 7	; 7
     42c:	84 e0       	ldi	r24, 0x04	; 4
     42e:	85 bd       	out	0x25, r24	; 37
     430:	8b b1       	in	r24, 0x0b	; 11
     432:	80 63       	ori	r24, 0x30	; 48
     434:	8b b9       	out	0x0b, r24	; 11
     436:	8a b1       	in	r24, 0x0a	; 10
     438:	80 63       	ori	r24, 0x30	; 48
     43a:	8a b9       	out	0x0a, r24	; 10
     43c:	42 9a       	sbi	0x08, 2	; 8
     43e:	3a 98       	cbi	0x07, 2	; 7
     440:	44 9a       	sbi	0x08, 4	; 8
     442:	3c 98       	cbi	0x07, 4	; 7
     444:	45 9a       	sbi	0x08, 5	; 8
     446:	3d 98       	cbi	0x07, 5	; 7
     448:	2f 9a       	sbi	0x05, 7	; 5
     44a:	27 98       	cbi	0x04, 7	; 4
     44c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7fc068>
     450:	81 60       	ori	r24, 0x01	; 1
     452:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7fc068>
     456:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7fc068>
     45a:	82 60       	ori	r24, 0x02	; 2
     45c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7fc068>
     460:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
     464:	88 60       	ori	r24, 0x08	; 8
     466:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
     46a:	2d 98       	cbi	0x05, 5	; 5
     46c:	83 e2       	ldi	r24, 0x23	; 35
     46e:	8e bd       	out	0x2e, r24	; 46
     470:	0d b4       	in	r0, 0x2d	; 45
     472:	07 fe       	sbrs	r0, 7
     474:	fd cf       	rjmp	.-6      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     476:	82 ea       	ldi	r24, 0xA2	; 162
     478:	8e bd       	out	0x2e, r24	; 46
     47a:	0d b4       	in	r0, 0x2d	; 45
     47c:	07 fe       	sbrs	r0, 7
     47e:	fd cf       	rjmp	.-6      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     480:	2d 9a       	sbi	0x05, 5	; 5
     482:	95 b1       	in	r25, 0x05	; 5
     484:	80 e4       	ldi	r24, 0x40	; 64
     486:	98 27       	eor	r25, r24
     488:	95 b9       	out	0x05, r25	; 5
     48a:	95 b1       	in	r25, 0x05	; 5
     48c:	89 27       	eor	r24, r25
     48e:	85 b9       	out	0x05, r24	; 5
     490:	2d 98       	cbi	0x05, 5	; 5
     492:	86 e3       	ldi	r24, 0x36	; 54
     494:	8e bd       	out	0x2e, r24	; 46
     496:	0d b4       	in	r0, 0x2d	; 45
     498:	07 fe       	sbrs	r0, 7
     49a:	fd cf       	rjmp	.-6      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     49c:	8f e0       	ldi	r24, 0x0F	; 15
     49e:	8e bd       	out	0x2e, r24	; 46
     4a0:	0d b4       	in	r0, 0x2d	; 45
     4a2:	07 fe       	sbrs	r0, 7
     4a4:	fd cf       	rjmp	.-6      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     4a6:	2d 9a       	sbi	0x05, 5	; 5
     4a8:	95 b1       	in	r25, 0x05	; 5
     4aa:	80 e4       	ldi	r24, 0x40	; 64
     4ac:	98 27       	eor	r25, r24
     4ae:	95 b9       	out	0x05, r25	; 5
     4b0:	95 b1       	in	r25, 0x05	; 5
     4b2:	89 27       	eor	r24, r25
     4b4:	85 b9       	out	0x05, r24	; 5
     4b6:	08 95       	ret

000004b8 <main>:
     4b8:	60 df       	rcall	.-320    	; 0x37a <SetupHardware>
     4ba:	13 e0       	ldi	r17, 0x03	; 3
     4bc:	2f b7       	in	r18, 0x3f	; 63
     4be:	f8 94       	cli
     4c0:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <USBtoUSART_Buffer+0x84>
     4c4:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <USBtoUSART_Buffer+0x85>
     4c8:	2f bf       	out	0x3f, r18	; 63
     4ca:	80 38       	cpi	r24, 0x80	; 128
     4cc:	91 05       	cpc	r25, r1
     4ce:	71 f0       	breq	.+28     	; 0x4ec <main+0x34>
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	ed d5       	rcall	.+3034   	; 0x10b0 <CDC_Device_ReceiveByte>
     4d6:	ec 01       	movw	r28, r24
     4d8:	97 fd       	sbrc	r25, 7
     4da:	08 c0       	rjmp	.+16     	; 0x4ec <main+0x34>
     4dc:	68 2f       	mov	r22, r24
     4de:	86 ee       	ldi	r24, 0xE6	; 230
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	35 de       	rcall	.-918    	; 0x14e <RingBuffer_Insert>
     4e4:	6c 2f       	mov	r22, r28
     4e6:	80 e6       	ldi	r24, 0x60	; 96
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	31 de       	rcall	.-926    	; 0x14e <RingBuffer_Insert>
     4ec:	8f b7       	in	r24, 0x3f	; 63
     4ee:	f8 94       	cli
     4f0:	c0 91 e4 01 	lds	r28, 0x01E4	; 0x8001e4 <USARTtoUSB_Buffer+0x84>
     4f4:	d0 91 e5 01 	lds	r29, 0x01E5	; 0x8001e5 <USARTtoUSB_Buffer+0x85>
     4f8:	8f bf       	out	0x3f, r24	; 63
     4fa:	a8 99       	sbic	0x15, 0	; 21
     4fc:	03 c0       	rjmp	.+6      	; 0x504 <main+0x4c>
     4fe:	c1 36       	cpi	r28, 0x61	; 97
     500:	d1 05       	cpc	r29, r1
     502:	48 f1       	brcs	.+82     	; 0x556 <main+0x9e>
     504:	a8 9a       	sbi	0x15, 0	; 21
     506:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USARTtoUSB_Buffer+0x84>
     50a:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <USARTtoUSB_Buffer+0x85>
     50e:	89 2b       	or	r24, r25
     510:	19 f0       	breq	.+6      	; 0x518 <main+0x60>
     512:	5d 98       	cbi	0x0b, 5	; 11
     514:	10 93 1e 01 	sts	0x011E, r17	; 0x80011e <__data_end>
     518:	20 97       	sbiw	r28, 0x00	; 0
     51a:	49 f0       	breq	.+18     	; 0x52e <main+0x76>
     51c:	80 e6       	ldi	r24, 0x60	; 96
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	36 de       	rcall	.-916    	; 0x18e <RingBuffer_Remove>
     522:	68 2f       	mov	r22, r24
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	64 d5       	rcall	.+2760   	; 0xff2 <CDC_Device_SendByte>
     52a:	21 97       	sbiw	r28, 0x01	; 1
     52c:	f5 cf       	rjmp	.-22     	; 0x518 <main+0x60>
     52e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     532:	88 23       	and	r24, r24
     534:	31 f0       	breq	.+12     	; 0x542 <main+0x8a>
     536:	81 50       	subi	r24, 0x01	; 1
     538:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
     53c:	81 11       	cpse	r24, r1
     53e:	01 c0       	rjmp	.+2      	; 0x542 <main+0x8a>
     540:	5d 9a       	sbi	0x0b, 5	; 11
     542:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <RxLEDPulse>
     546:	88 23       	and	r24, r24
     548:	31 f0       	breq	.+12     	; 0x556 <main+0x9e>
     54a:	81 50       	subi	r24, 0x01	; 1
     54c:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <RxLEDPulse>
     550:	81 11       	cpse	r24, r1
     552:	01 c0       	rjmp	.+2      	; 0x556 <main+0x9e>
     554:	5c 9a       	sbi	0x0b, 4	; 11
     556:	2f b7       	in	r18, 0x3f	; 63
     558:	f8 94       	cli
     55a:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <USBtoUSART_Buffer+0x84>
     55e:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <USBtoUSART_Buffer+0x85>
     562:	2f bf       	out	0x3f, r18	; 63
     564:	89 2b       	or	r24, r25
     566:	61 f0       	breq	.+24     	; 0x580 <main+0xc8>
     568:	86 ee       	ldi	r24, 0xE6	; 230
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	10 de       	rcall	.-992    	; 0x18e <RingBuffer_Remove>
     56e:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7fc0c8>
     572:	95 ff       	sbrs	r25, 5
     574:	fc cf       	rjmp	.-8      	; 0x56e <main+0xb6>
     576:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7fc0ce>
     57a:	5c 98       	cbi	0x0b, 4	; 11
     57c:	10 93 5f 01 	sts	0x015F, r17	; 0x80015f <RxLEDPulse>
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	87 d5       	rcall	.+2830   	; 0x1094 <CDC_Device_USBTask>
     586:	6c d4       	rcall	.+2264   	; 0xe60 <USB_USBTask>
     588:	99 cf       	rjmp	.-206    	; 0x4bc <main+0x4>

0000058a <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
  CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	ea c4       	rjmp	.+2516   	; 0xf64 <CDC_Device_ConfigureEndpoints>

00000590 <EVENT_USB_Device_UnhandledControlRequest>:
}

/** Event handler for the library USB Unhandled Control Request event. */
void EVENT_USB_Device_UnhandledControlRequest(void)
{
  CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	77 c4       	rjmp	.+2286   	; 0xe84 <CDC_Device_ProcessControlRequest>

00000596 <EVENT_CDC_Device_LineEncodingChanged>:
 * Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	ec 01       	movw	r28, r24
  /* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
  UCSR1B = 0;
     59c:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7fc0c9>

  /* Reconfigure USART Baud Rate Registers */
  UBRR1 = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);  
     5a0:	2f 85       	ldd	r18, Y+15	; 0x0f
     5a2:	38 89       	ldd	r19, Y+16	; 0x10
     5a4:	49 89       	ldd	r20, Y+17	; 0x11
     5a6:	5a 89       	ldd	r21, Y+18	; 0x12
     5a8:	da 01       	movw	r26, r20
     5aa:	c9 01       	movw	r24, r18
     5ac:	b6 95       	lsr	r27
     5ae:	a7 95       	ror	r26
     5b0:	97 95       	ror	r25
     5b2:	87 95       	ror	r24
     5b4:	bc 01       	movw	r22, r24
     5b6:	cd 01       	movw	r24, r26
     5b8:	60 58       	subi	r22, 0x80	; 128
     5ba:	7b 47       	sbci	r23, 0x7B	; 123
     5bc:	81 4e       	sbci	r24, 0xE1	; 225
     5be:	9f 4f       	sbci	r25, 0xFF	; 255
     5c0:	a2 d5       	rcall	.+2884   	; 0x1106 <__udivmodsi4>
     5c2:	21 50       	subi	r18, 0x01	; 1
     5c4:	31 09       	sbc	r19, r1
     5c6:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7fc0cd>
     5ca:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7fc0cc>
  /* Reconfigure UCSRnC – USART Control and Status Register C */
  {
    uint8_t ConfigMask = 0;

    // Bits 5:4 – UPMn1:0: Parity Mode
    switch (CDCInterfaceInfo->State.LineEncoding.ParityType) {
     5ce:	8c 89       	ldd	r24, Y+20	; 0x14
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	21 f0       	breq	.+8      	; 0x5dc <EVENT_CDC_Device_LineEncodingChanged+0x46>
     5d4:	82 30       	cpi	r24, 0x02	; 2
     5d6:	21 f4       	brne	.+8      	; 0x5e0 <EVENT_CDC_Device_LineEncodingChanged+0x4a>
      case CDC_PARITY_Odd:  ConfigMask = (_BV(UPM11) | _BV(UPM10));    break;
      case CDC_PARITY_Even: ConfigMask =  _BV(UPM11);                  break;
     5d8:	80 e2       	ldi	r24, 0x20	; 32
     5da:	03 c0       	rjmp	.+6      	; 0x5e2 <EVENT_CDC_Device_LineEncodingChanged+0x4c>
  {
    uint8_t ConfigMask = 0;

    // Bits 5:4 – UPMn1:0: Parity Mode
    switch (CDCInterfaceInfo->State.LineEncoding.ParityType) {
      case CDC_PARITY_Odd:  ConfigMask = (_BV(UPM11) | _BV(UPM10));    break;
     5dc:	80 e3       	ldi	r24, 0x30	; 48
     5de:	01 c0       	rjmp	.+2      	; 0x5e2 <EVENT_CDC_Device_LineEncodingChanged+0x4c>
  /* Reconfigure USART Baud Rate Registers */
  UBRR1 = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);  

  /* Reconfigure UCSRnC – USART Control and Status Register C */
  {
    uint8_t ConfigMask = 0;
     5e0:	80 e0       	ldi	r24, 0x00	; 0
      case CDC_PARITY_Odd:  ConfigMask = (_BV(UPM11) | _BV(UPM10));    break;
      case CDC_PARITY_Even: ConfigMask =  _BV(UPM11);                  break;
    }

    // Bit 3 – USBSn: Stop Bit Select
    if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     5e2:	9b 89       	ldd	r25, Y+19	; 0x13
     5e4:	92 30       	cpi	r25, 0x02	; 2
     5e6:	09 f4       	brne	.+2      	; 0x5ea <EVENT_CDC_Device_LineEncodingChanged+0x54>
      ConfigMask |= _BV(USBS1);
     5e8:	88 60       	ori	r24, 0x08	; 8

    // Bit 2:1 – UCSZn1:0: Character Size
    switch (CDCInterfaceInfo->State.LineEncoding.DataBits) {
     5ea:	9d 89       	ldd	r25, Y+21	; 0x15
     5ec:	97 30       	cpi	r25, 0x07	; 7
     5ee:	31 f0       	breq	.+12     	; 0x5fc <EVENT_CDC_Device_LineEncodingChanged+0x66>
     5f0:	98 30       	cpi	r25, 0x08	; 8
     5f2:	31 f0       	breq	.+12     	; 0x600 <EVENT_CDC_Device_LineEncodingChanged+0x6a>
     5f4:	96 30       	cpi	r25, 0x06	; 6
     5f6:	29 f4       	brne	.+10     	; 0x602 <EVENT_CDC_Device_LineEncodingChanged+0x6c>
      case 6: ConfigMask |=                _BV(UCSZ10) ; break;
     5f8:	82 60       	ori	r24, 0x02	; 2
     5fa:	03 c0       	rjmp	.+6      	; 0x602 <EVENT_CDC_Device_LineEncodingChanged+0x6c>
      case 7: ConfigMask |=  _BV(UCSZ11);                break;
     5fc:	84 60       	ori	r24, 0x04	; 4
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <EVENT_CDC_Device_LineEncodingChanged+0x6c>
      case 8: ConfigMask |= (_BV(UCSZ11) | _BV(UCSZ10)); break;
     600:	86 60       	ori	r24, 0x06	; 6
    }

    UCSR1C = ConfigMask;
     602:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7fc0ca>
  }

  /* Reconfigure UCSRnA – USART Control and Status Register A */
  UCSR1A = _BV(U2X1);
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7fc0c8>

  /* Reconfigure UCSRnB – USART Control and Status Register B */
  UCSR1B = _BV(RXCIE1) | _BV(RXEN1) | _BV(TXEN1);
     60c:	88 e9       	ldi	r24, 0x98	; 152
     60e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7fc0c9>
}
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <EVENT_CDC_Device_ControLineStateChanged>:
/* Event handler for the CDC Class driver control line state change event.
 *
 * \param[in] CDCInterfaceInfo Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
  bool DataTerminalReady = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);

  // Data Terminal Ready (DTR)
  if (DataTerminalReady){
     61c:	fc 01       	movw	r30, r24
     61e:	85 85       	ldd	r24, Z+13	; 0x0d
     620:	80 ff       	sbrs	r24, 0
     622:	0c c0       	rjmp	.+24     	; 0x63c <EVENT_CDC_Device_ControLineStateChanged+0x24>
     624:	c6 e1       	ldi	r28, 0x16	; 22
     626:	d1 e0       	ldi	r29, 0x01	; 1
 * 
 */
static inline void UARTConsole_PrintHeader()
{
  for(uint8_t i=0;i<6;i++)
    CDC_Device_SendByte(&VirtualSerial_CDC_Interface, UART_HEADER[i]);
     628:	69 91       	ld	r22, Y+
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	e1 d4       	rcall	.+2498   	; 0xff2 <CDC_Device_SendByte>
/*
 * 
 */
static inline void UARTConsole_PrintHeader()
{
  for(uint8_t i=0;i<6;i++)
     630:	f1 e0       	ldi	r31, 0x01	; 1
     632:	cc 31       	cpi	r28, 0x1C	; 28
     634:	df 07       	cpc	r29, r31
     636:	c1 f7       	brne	.-16     	; 0x628 <EVENT_CDC_Device_ControLineStateChanged+0x10>
    UARTConsole_PrintHeader();
    RRAM_NRST_LINE_PORT &= ~RRAM_NRST_LINE_MASK;
     638:	5f 98       	cbi	0x0b, 7	; 11
     63a:	01 c0       	rjmp	.+2      	; 0x63e <EVENT_CDC_Device_ControLineStateChanged+0x26>
  }
  else{
    RRAM_NRST_LINE_PORT |=  RRAM_NRST_LINE_MASK;
     63c:	5f 9a       	sbi	0x0b, 7	; 11
  }
}
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <__vector_23>:
 * ISR to manage the reception of data from the serial port
 * placing received bytes into a circular buffer for later
 * transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     644:	1f 92       	push	r1
     646:	0f 92       	push	r0
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	0f 92       	push	r0
     64c:	11 24       	eor	r1, r1
     64e:	2f 93       	push	r18
     650:	3f 93       	push	r19
     652:	4f 93       	push	r20
     654:	5f 93       	push	r21
     656:	6f 93       	push	r22
     658:	7f 93       	push	r23
     65a:	8f 93       	push	r24
     65c:	9f 93       	push	r25
     65e:	af 93       	push	r26
     660:	bf 93       	push	r27
     662:	ef 93       	push	r30
     664:	ff 93       	push	r31
  /* USART -> Buffer */
  RingBuffer_Insert(&USARTtoUSB_Buffer, UDR1);
     666:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7fc0ce>
     66a:	80 e6       	ldi	r24, 0x60	; 96
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	6f dd       	rcall	.-1314   	; 0x14e <RingBuffer_Insert>
}
     670:	ff 91       	pop	r31
     672:	ef 91       	pop	r30
     674:	bf 91       	pop	r27
     676:	af 91       	pop	r26
     678:	9f 91       	pop	r25
     67a:	8f 91       	pop	r24
     67c:	7f 91       	pop	r23
     67e:	6f 91       	pop	r22
     680:	5f 91       	pop	r21
     682:	4f 91       	pop	r20
     684:	3f 91       	pop	r19
     686:	2f 91       	pop	r18
     688:	0f 90       	pop	r0
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	0f 90       	pop	r0
     68e:	1f 90       	pop	r1
     690:	18 95       	reti

00000692 <CALLBACK_USB_GetDescriptor>:
  const uint8_t  DescriptorNumber = (wValue & 0xFF);

  void*    Address = NULL;
  uint16_t Size    = NO_DESCRIPTOR;

  switch (DescriptorType)
     692:	29 2f       	mov	r18, r25
     694:	33 27       	eor	r19, r19
     696:	22 30       	cpi	r18, 0x02	; 2
     698:	31 05       	cpc	r19, r1
     69a:	59 f0       	breq	.+22     	; 0x6b2 <CALLBACK_USB_GetDescriptor+0x20>
     69c:	23 30       	cpi	r18, 0x03	; 3
     69e:	31 05       	cpc	r19, r1
     6a0:	69 f0       	breq	.+26     	; 0x6bc <CALLBACK_USB_GetDescriptor+0x2a>
     6a2:	21 30       	cpi	r18, 0x01	; 1
     6a4:	31 05       	cpc	r19, r1
     6a6:	e9 f4       	brne	.+58     	; 0x6e2 <CALLBACK_USB_GetDescriptor+0x50>
  {
    case DTYPE_Device: 
      Address = (void*)&DeviceDescriptor;
      Size    = sizeof(USB_Descriptor_Device_t);
     6a8:	82 e1       	ldi	r24, 0x12	; 18
     6aa:	90 e0       	ldi	r25, 0x00	; 0
  uint16_t Size    = NO_DESCRIPTOR;

  switch (DescriptorType)
  {
    case DTYPE_Device: 
      Address = (void*)&DeviceDescriptor;
     6ac:	22 e0       	ldi	r18, 0x02	; 2
     6ae:	31 e0       	ldi	r19, 0x01	; 1
     6b0:	1c c0       	rjmp	.+56     	; 0x6ea <CALLBACK_USB_GetDescriptor+0x58>
      Size    = sizeof(USB_Descriptor_Device_t);
      break;
    case DTYPE_Configuration: 
      Address = (void*)&ConfigurationDescriptor;
      Size    = sizeof(USB_Descriptor_Configuration_t);
     6b2:	8e e3       	ldi	r24, 0x3E	; 62
     6b4:	90 e0       	ldi	r25, 0x00	; 0
    case DTYPE_Device: 
      Address = (void*)&DeviceDescriptor;
      Size    = sizeof(USB_Descriptor_Device_t);
      break;
    case DTYPE_Configuration: 
      Address = (void*)&ConfigurationDescriptor;
     6b6:	24 ec       	ldi	r18, 0xC4	; 196
     6b8:	30 e0       	ldi	r19, 0x00	; 0
      Size    = sizeof(USB_Descriptor_Configuration_t);
      break;
     6ba:	17 c0       	rjmp	.+46     	; 0x6ea <CALLBACK_USB_GetDescriptor+0x58>
    case DTYPE_String: 
      switch (DescriptorNumber)
     6bc:	99 27       	eor	r25, r25
     6be:	81 30       	cpi	r24, 0x01	; 1
     6c0:	91 05       	cpc	r25, r1
     6c2:	49 f0       	breq	.+18     	; 0x6d6 <CALLBACK_USB_GetDescriptor+0x44>
     6c4:	28 f0       	brcs	.+10     	; 0x6d0 <CALLBACK_USB_GetDescriptor+0x3e>
     6c6:	02 97       	sbiw	r24, 0x02	; 2
     6c8:	61 f4       	brne	.+24     	; 0x6e2 <CALLBACK_USB_GetDescriptor+0x50>
          Address = (void*)&ManufacturerString;
          Size    = pgm_read_byte(&ManufacturerString.Header.Size);
          break;
        case 0x02: 
          Address = (void*)&ProductString;
          Size    = pgm_read_byte(&ProductString.Header.Size);
     6ca:	e8 e8       	ldi	r30, 0x88	; 136
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	05 c0       	rjmp	.+10     	; 0x6da <CALLBACK_USB_GetDescriptor+0x48>
    case DTYPE_String: 
      switch (DescriptorNumber)
      {
        case 0x00: 
          Address = (void*)&LanguageString;
          Size    = pgm_read_byte(&LanguageString.Header.Size);
     6d0:	e0 ec       	ldi	r30, 0xC0	; 192
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <CALLBACK_USB_GetDescriptor+0x48>
          break;
        case 0x01: 
          Address = (void*)&ManufacturerString;
          Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     6d6:	e2 eb       	ldi	r30, 0xB2	; 178
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
          break;
        case 0x02: 
          Address = (void*)&ProductString;
          Size    = pgm_read_byte(&ProductString.Header.Size);
     6da:	84 91       	lpm	r24, Z
     6dc:	90 e0       	ldi	r25, 0x00	; 0
        case 0x01: 
          Address = (void*)&ManufacturerString;
          Size    = pgm_read_byte(&ManufacturerString.Header.Size);
          break;
        case 0x02: 
          Address = (void*)&ProductString;
     6de:	9f 01       	movw	r18, r30
          Size    = pgm_read_byte(&ProductString.Header.Size);
          break;
     6e0:	04 c0       	rjmp	.+8      	; 0x6ea <CALLBACK_USB_GetDescriptor+0x58>
{
  const uint8_t  DescriptorType   = (wValue >> 8);
  const uint8_t  DescriptorNumber = (wValue & 0xFF);

  void*    Address = NULL;
  uint16_t Size    = NO_DESCRIPTOR;
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
  const uint8_t  DescriptorType   = (wValue >> 8);
  const uint8_t  DescriptorNumber = (wValue & 0xFF);

  void*    Address = NULL;
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
      }
      
      break;
  }
  
  *DescriptorAddress = Address;
     6ea:	fa 01       	movw	r30, r20
     6ec:	31 83       	std	Z+1, r19	; 0x01
     6ee:	20 83       	st	Z, r18
  return Size;
}
     6f0:	08 95       	ret

000006f2 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     6f2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     6f6:	eb ee       	ldi	r30, 0xEB	; 235
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	81 60       	ori	r24, 0x01	; 1
     6fe:	80 83       	st	Z, r24
     700:	ed ee       	ldi	r30, 0xED	; 237
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	10 82       	st	Z, r1
     706:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     70a:	40 83       	st	Z, r20
     70c:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     710:	88 1f       	adc	r24, r24
     712:	88 27       	eor	r24, r24
     714:	88 1f       	adc	r24, r24
     716:	08 95       	ret

00000718 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     718:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <USB_ControlRequest>
     71c:	87 ff       	sbrs	r24, 7
     71e:	0f c0       	rjmp	.+30     	; 0x73e <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     720:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     724:	82 fd       	sbrc	r24, 2
     726:	04 c0       	rjmp	.+8      	; 0x730 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     728:	8e b3       	in	r24, 0x1e	; 30
     72a:	81 11       	cpse	r24, r1
     72c:	f9 cf       	rjmp	.-14     	; 0x720 <Endpoint_ClearStatusStage+0x8>
     72e:	10 c0       	rjmp	.+32     	; 0x750 <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     730:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     734:	8b 77       	andi	r24, 0x7B	; 123
     736:	0a c0       	rjmp	.+20     	; 0x74c <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     738:	8e b3       	in	r24, 0x1e	; 30
     73a:	88 23       	and	r24, r24
     73c:	49 f0       	breq	.+18     	; 0x750 <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     73e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     742:	80 ff       	sbrs	r24, 0
     744:	f9 cf       	rjmp	.-14     	; 0x738 <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     746:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     74a:	8e 77       	andi	r24, 0x7E	; 126
     74c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     750:	08 95       	ret

00000752 <Endpoint_WaitUntilReady>:
			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is active (i.e. enumerated to a host)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     752:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
     756:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
     75a:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     75c:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     760:	90 ff       	sbrs	r25, 0
     762:	05 c0       	rjmp	.+10     	; 0x76e <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     764:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		{
			if (Endpoint_IsINReady())
     768:	90 ff       	sbrs	r25, 0
     76a:	05 c0       	rjmp	.+10     	; 0x776 <Endpoint_WaitUntilReady+0x24>
     76c:	1a c0       	rjmp	.+52     	; 0x7a2 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     76e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     772:	92 fd       	sbrc	r25, 2
     774:	16 c0       	rjmp	.+44     	; 0x7a2 <Endpoint_WaitUntilReady+0x50>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     776:	9e b3       	in	r25, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     778:	99 23       	and	r25, r25
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <Endpoint_WaitUntilReady+0x54>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     77c:	95 30       	cpi	r25, 0x05	; 5
     77e:	a9 f0       	breq	.+42     	; 0x7aa <Endpoint_WaitUntilReady+0x58>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     780:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     784:	95 fd       	sbrc	r25, 5
     786:	13 c0       	rjmp	.+38     	; 0x7ae <Endpoint_WaitUntilReady+0x5c>
     788:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
     78c:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     790:	24 17       	cp	r18, r20
     792:	35 07       	cpc	r19, r21
     794:	19 f3       	breq	.-58     	; 0x75c <Endpoint_WaitUntilReady+0xa>
     796:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     798:	11 f0       	breq	.+4      	; 0x79e <Endpoint_WaitUntilReady+0x4c>
     79a:	a9 01       	movw	r20, r18
     79c:	df cf       	rjmp	.-66     	; 0x75c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     79e:	84 e0       	ldi	r24, 0x04	; 4
     7a0:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     7a6:	82 e0       	ldi	r24, 0x02	; 2
     7a8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     7aa:	83 e0       	ldi	r24, 0x03	; 3
     7ac:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     7ae:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     7b0:	08 95       	ret

000007b2 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     7b2:	3c d0       	rcall	.+120    	; 0x82c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     7b4:	3e d0       	rcall	.+124    	; 0x832 <USB_INT_ClearAllInterrupts>
     7b6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     7ba:	98 2f       	mov	r25, r24

				USBCON = (Temp & ~(1 << USBE));
     7bc:	9f 77       	andi	r25, 0x7F	; 127
     7be:	90 93 d8 00 	sts	0x00D8, r25	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     7c2:	80 68       	ori	r24, 0x80	; 128
				USBCON = (Temp |  (1 << USBE));
     7c4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     7c8:	84 e0       	ldi	r24, 0x04	; 4

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     7ca:	89 bd       	out	0x29, r24	; 41
     7cc:	89 b5       	in	r24, 0x29	; 41
				PLLCSR |= (1 << PLLE);
     7ce:	82 60       	ori	r24, 0x02	; 2
     7d0:	89 bd       	out	0x29, r24	; 41
     7d2:	09 b4       	in	r0, 0x29	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     7d4:	00 fe       	sbrs	r0, 0
     7d6:	fd cf       	rjmp	.-6      	; 0x7d2 <USB_ResetInterface+0x20>
     7d8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     7dc:	8f 7d       	andi	r24, 0xDF	; 223
     7de:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     7e2:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
     7e4:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <USB_ConfigurationNumber>
	USB_ConfigurationNumber  = 0;
     7e8:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	81 df       	rcall	.-254    	; 0x6f2 <Endpoint_ConfigureEndpoint_Prv>
     7f0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
     7f4:	8e 7f       	andi	r24, 0xFE	; 254
     7f6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     7fa:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
	USB_INT_Enable(USB_INT_SUSPI);
     7fe:	81 60       	ori	r24, 0x01	; 1
     800:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     804:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
	USB_INT_Enable(USB_INT_EORSTI);
     808:	88 60       	ori	r24, 0x08	; 8
     80a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     80e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7fc0e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     812:	8e 7f       	andi	r24, 0xFE	; 254
     814:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7fc0e0>
     818:	08 95       	ret

0000081a <USB_Init>:
     81a:	e3 e6       	ldi	r30, 0x63	; 99
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
			#else
				REGCR   &= ~(1 << REGDIS);
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	80 81       	ld	r24, Z
     820:	8e 7f       	andi	r24, 0xFE	; 254
     822:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <USB_IsInitialized>

	USB_ResetInterface();
     82a:	c3 cf       	rjmp	.-122    	; 0x7b2 <USB_ResetInterface>

0000082c <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     82c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     830:	08 95       	ret

00000832 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
     832:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     836:	08 95       	ret

00000838 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     838:	1f 92       	push	r1
     83a:	0f 92       	push	r0
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	0f 92       	push	r0
     840:	11 24       	eor	r1, r1
     842:	2f 93       	push	r18
     844:	3f 93       	push	r19
     846:	4f 93       	push	r20
     848:	5f 93       	push	r21
     84a:	6f 93       	push	r22
     84c:	7f 93       	push	r23
     84e:	8f 93       	push	r24
     850:	9f 93       	push	r25
     852:	af 93       	push	r26
     854:	bf 93       	push	r27
     856:	ef 93       	push	r30
     858:	ff 93       	push	r31
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     85a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     85e:	80 ff       	sbrs	r24, 0
     860:	1b c0       	rjmp	.+54     	; 0x898 <__vector_11+0x60>
     862:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     866:	80 ff       	sbrs	r24, 0
     868:	17 c0       	rjmp	.+46     	; 0x898 <__vector_11+0x60>
	{
		USB_INT_Clear(USB_INT_SUSPI);
     86a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     86e:	8e 7f       	andi	r24, 0xFE	; 254
     870:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>

		USB_INT_Disable(USB_INT_SUSPI);
     874:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     878:	8e 7f       	andi	r24, 0xFE	; 254
     87a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
		USB_INT_Enable(USB_INT_WAKEUPI);
     87e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     882:	80 61       	ori	r24, 0x10	; 16
     884:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     888:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     88c:	80 62       	ori	r24, 0x20	; 32
     88e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     892:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     894:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
     896:	f9 d1       	rcall	.+1010   	; 0xc8a <USB_Event_Stub>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     898:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     89c:	84 ff       	sbrs	r24, 4
     89e:	2d c0       	rjmp	.+90     	; 0x8fa <__vector_11+0xc2>
     8a0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     8a4:	84 ff       	sbrs	r24, 4
     8a6:	29 c0       	rjmp	.+82     	; 0x8fa <__vector_11+0xc2>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     8a8:	84 e0       	ldi	r24, 0x04	; 4
     8aa:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     8ac:	89 b5       	in	r24, 0x29	; 41
     8ae:	82 60       	ori	r24, 0x02	; 2
     8b0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     8b2:	09 b4       	in	r0, 0x29	; 41
     8b4:	00 fe       	sbrs	r0, 0
     8b6:	fd cf       	rjmp	.-6      	; 0x8b2 <__vector_11+0x7a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     8b8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     8bc:	8f 7d       	andi	r24, 0xDF	; 223
     8be:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
     8c2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     8c6:	8f 7e       	andi	r24, 0xEF	; 239
     8c8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>

		USB_INT_Disable(USB_INT_WAKEUPI);
     8cc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     8d0:	8f 7e       	andi	r24, 0xEF	; 239
     8d2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
		USB_INT_Enable(USB_INT_SUSPI);
     8d6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     8da:	81 60       	ori	r24, 0x01	; 1
     8dc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>

		if (USB_ConfigurationNumber)
     8e0:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <USB_ConfigurationNumber>
     8e4:	81 11       	cpse	r24, r1
     8e6:	06 c0       	rjmp	.+12     	; 0x8f4 <__vector_11+0xbc>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     8e8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     8ec:	87 fd       	sbrc	r24, 7
     8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <__vector_11+0xbc>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	01 c0       	rjmp	.+2      	; 0x8f6 <__vector_11+0xbe>
     8f4:	84 e0       	ldi	r24, 0x04	; 4

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     8f6:	8e bb       	out	0x1e, r24	; 30
     8f8:	c8 d1       	rcall	.+912    	; 0xc8a <USB_Event_Stub>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     8fa:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     8fe:	83 ff       	sbrs	r24, 3
     900:	26 c0       	rjmp	.+76     	; 0x94e <__vector_11+0x116>
     902:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     906:	83 ff       	sbrs	r24, 3
     908:	22 c0       	rjmp	.+68     	; 0x94e <__vector_11+0x116>
	{
		USB_INT_Clear(USB_INT_EORSTI);
     90a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     90e:	87 7f       	andi	r24, 0xF7	; 247
     910:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>

		USB_DeviceState         = DEVICE_STATE_Default;
     914:	82 e0       	ldi	r24, 0x02	; 2
     916:	8e bb       	out	0x1e, r24	; 30
		USB_ConfigurationNumber = 0;
     918:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <USB_ConfigurationNumber>

		USB_INT_Clear(USB_INT_SUSPI);
     91c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     920:	8e 7f       	andi	r24, 0xFE	; 254
     922:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		USB_INT_Disable(USB_INT_SUSPI);
     926:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     92a:	8e 7f       	andi	r24, 0xFE	; 254
     92c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
		USB_INT_Enable(USB_INT_WAKEUPI);
     930:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     934:	80 61       	ori	r24, 0x10	; 16
     936:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     93a:	42 e0       	ldi	r20, 0x02	; 2
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	d8 de       	rcall	.-592    	; 0x6f2 <Endpoint_ConfigureEndpoint_Prv>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
		                           ENDPOINT_BANK_SINGLE);

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
     942:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
     946:	88 60       	ori	r24, 0x08	; 8
     948:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
		#endif

		EVENT_USB_Device_Reset();
     94c:	9e d1       	rcall	.+828    	; 0xc8a <USB_Event_Stub>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     94e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     952:	82 ff       	sbrs	r24, 2
     954:	0a c0       	rjmp	.+20     	; 0x96a <__vector_11+0x132>
     956:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     95a:	82 ff       	sbrs	r24, 2
     95c:	06 c0       	rjmp	.+12     	; 0x96a <__vector_11+0x132>
	{
		USB_INT_Clear(USB_INT_SOFI);
     95e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     962:	8b 7f       	andi	r24, 0xFB	; 251
     964:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>

		EVENT_USB_Device_StartOfFrame();
     968:	90 d1       	rcall	.+800    	; 0xc8a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     96a:	ff 91       	pop	r31
     96c:	ef 91       	pop	r30
     96e:	bf 91       	pop	r27
     970:	af 91       	pop	r26
     972:	9f 91       	pop	r25
     974:	8f 91       	pop	r24
     976:	7f 91       	pop	r23
     978:	6f 91       	pop	r22
     97a:	5f 91       	pop	r21
     97c:	4f 91       	pop	r20
     97e:	3f 91       	pop	r19
     980:	2f 91       	pop	r18
     982:	0f 90       	pop	r0
     984:	0f be       	out	0x3f, r0	; 63
     986:	0f 90       	pop	r0
     988:	1f 90       	pop	r1
     98a:	18 95       	reti

0000098c <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     98c:	1f 92       	push	r1
     98e:	0f 92       	push	r0
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	0f 92       	push	r0
     994:	11 24       	eor	r1, r1
     996:	ff 92       	push	r15
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	2f 93       	push	r18
     99e:	3f 93       	push	r19
     9a0:	4f 93       	push	r20
     9a2:	5f 93       	push	r21
     9a4:	6f 93       	push	r22
     9a6:	7f 93       	push	r23
     9a8:	8f 93       	push	r24
     9aa:	9f 93       	push	r25
     9ac:	af 93       	push	r26
     9ae:	bf 93       	push	r27
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	ef 93       	push	r30
     9b6:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     9b8:	c9 ee       	ldi	r28, 0xE9	; 233
     9ba:	d0 e0       	ldi	r29, 0x00	; 0
     9bc:	88 81       	ld	r24, Y
     9be:	87 70       	andi	r24, 0x07	; 7
     9c0:	f8 2e       	mov	r15, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     9c2:	18 82       	st	Y, r1
	uint8_t PrevSelectedEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);
     9c4:	00 ef       	ldi	r16, 0xF0	; 240
     9c6:	10 e0       	ldi	r17, 0x00	; 0
     9c8:	f8 01       	movw	r30, r16
     9ca:	80 81       	ld	r24, Z
     9cc:	87 7f       	andi	r24, 0xF7	; 247
     9ce:	80 83       	st	Z, r24

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
     9d0:	78 94       	sei

	NONATOMIC_BLOCK(NONATOMIC_FORCEOFF)
	{
		USB_Device_ProcessControlRequest();
     9d2:	1d d0       	rcall	.+58     	; 0xa0e <USB_Device_ProcessControlRequest>
    (void)__s;
}

static __inline__ void __iCliParam(const uint8_t *__s)
{
    cli();
     9d4:	f8 94       	cli
     9d6:	18 82       	st	Y, r1
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
     9d8:	f8 01       	movw	r30, r16
     9da:	80 81       	ld	r24, Z
     9dc:	88 60       	ori	r24, 0x08	; 8
     9de:	80 83       	st	Z, r24
     9e0:	f8 82       	st	Y, r15
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     9e2:	ff 91       	pop	r31
     9e4:	ef 91       	pop	r30
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	bf 91       	pop	r27
     9ec:	af 91       	pop	r26
     9ee:	9f 91       	pop	r25
     9f0:	8f 91       	pop	r24
     9f2:	7f 91       	pop	r23
     9f4:	6f 91       	pop	r22
     9f6:	5f 91       	pop	r21
     9f8:	4f 91       	pop	r20
     9fa:	3f 91       	pop	r19
     9fc:	2f 91       	pop	r18
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
     a02:	ff 90       	pop	r15
     a04:	0f 90       	pop	r0
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	0f 90       	pop	r0
     a0a:	1f 90       	pop	r1
     a0c:	18 95       	reti

00000a0e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	aa 97       	sbiw	r28, 0x2a	; 42
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	de bf       	out	0x3e, r29	; 62
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	ee e6       	ldi	r30, 0x6E	; 110
     a28:	f2 e0       	ldi	r31, 0x02	; 2
     a2a:	86 e7       	ldi	r24, 0x76	; 118
     a2c:	92 e0       	ldi	r25, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     a2e:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
     a32:	21 93       	st	Z+, r18
void USB_Device_ProcessControlRequest(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a34:	8e 17       	cp	r24, r30
     a36:	9f 07       	cpc	r25, r31
     a38:	d1 f7       	brne	.-12     	; 0xa2e <USB_Device_ProcessControlRequest+0x20>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     a3a:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <USB_ControlRequest>

	switch (USB_ControlRequest.bRequest)
     a3e:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <USB_ControlRequest+0x1>
     a42:	49 2f       	mov	r20, r25
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	4a 30       	cpi	r20, 0x0A	; 10
     a48:	51 05       	cpc	r21, r1
     a4a:	08 f0       	brcs	.+2      	; 0xa4e <USB_Device_ProcessControlRequest+0x40>
     a4c:	11 c1       	rjmp	.+546    	; 0xc70 <USB_Device_ProcessControlRequest+0x262>
     a4e:	fa 01       	movw	r30, r20
     a50:	e6 5c       	subi	r30, 0xC6	; 198
     a52:	ff 4f       	sbci	r31, 0xFF	; 255
     a54:	7a c3       	rjmp	.+1780   	; 0x114a <__tablejump2__>
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a56:	80 38       	cpi	r24, 0x80	; 128
     a58:	09 f4       	brne	.+2      	; 0xa5c <USB_Device_ProcessControlRequest+0x4e>
     a5a:	fb c0       	rjmp	.+502    	; 0xc52 <USB_Device_ProcessControlRequest+0x244>
     a5c:	82 38       	cpi	r24, 0x82	; 130
     a5e:	09 f0       	breq	.+2      	; 0xa62 <USB_Device_ProcessControlRequest+0x54>
     a60:	07 c1       	rjmp	.+526    	; 0xc70 <USB_Device_ProcessControlRequest+0x262>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a62:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <USB_ControlRequest+0x4>
     a66:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a68:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a6c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a70:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a74:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     a78:	97 7f       	andi	r25, 0xF7	; 247
     a7a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
     a7e:	85 fb       	bst	r24, 5
     a80:	88 27       	eor	r24, r24
     a82:	80 f9       	bld	r24, 0
     a84:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				UEDATX = (Word >> 8);
     a88:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     a8c:	bb c0       	rjmp	.+374    	; 0xc04 <USB_Device_ProcessControlRequest+0x1f6>
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a8e:	28 2f       	mov	r18, r24
     a90:	2d 7f       	andi	r18, 0xFD	; 253
     a92:	09 f0       	breq	.+2      	; 0xa96 <USB_Device_ProcessControlRequest+0x88>
     a94:	ed c0       	rjmp	.+474    	; 0xc70 <USB_Device_ProcessControlRequest+0x262>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     a96:	82 30       	cpi	r24, 0x02	; 2
     a98:	09 f0       	breq	.+2      	; 0xa9c <USB_Device_ProcessControlRequest+0x8e>
     a9a:	db c0       	rjmp	.+438    	; 0xc52 <USB_Device_ProcessControlRequest+0x244>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
     a9c:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <USB_ControlRequest+0x2>
     aa0:	81 11       	cpse	r24, r1
     aa2:	27 c0       	rjmp	.+78     	; 0xaf2 <USB_Device_ProcessControlRequest+0xe4>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     aa4:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <USB_ControlRequest+0x4>
     aa8:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     aaa:	09 f4       	brne	.+2      	; 0xaae <USB_Device_ProcessControlRequest+0xa0>
     aac:	d2 c0       	rjmp	.+420    	; 0xc52 <USB_Device_ProcessControlRequest+0x244>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     aae:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     ab2:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     ab6:	20 ff       	sbrs	r18, 0
     ab8:	1c c0       	rjmp	.+56     	; 0xaf2 <USB_Device_ProcessControlRequest+0xe4>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     aba:	93 30       	cpi	r25, 0x03	; 3
     abc:	21 f4       	brne	.+8      	; 0xac6 <USB_Device_ProcessControlRequest+0xb8>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     abe:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     ac2:	80 62       	ori	r24, 0x20	; 32
     ac4:	14 c0       	rjmp	.+40     	; 0xaee <USB_Device_ProcessControlRequest+0xe0>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     ac6:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     aca:	90 61       	ori	r25, 0x10	; 16
     acc:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     ad0:	21 e0       	ldi	r18, 0x01	; 1
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	a9 01       	movw	r20, r18
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <USB_Device_ProcessControlRequest+0xce>
     ad8:	44 0f       	add	r20, r20
     ada:	55 1f       	adc	r21, r21
     adc:	8a 95       	dec	r24
     ade:	e2 f7       	brpl	.-8      	; 0xad8 <USB_Device_ProcessControlRequest+0xca>
     ae0:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7fc0ea>
				UERST = 0;
     ae4:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7fc0ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     ae8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     aec:	88 60       	ori	r24, 0x08	; 8
     aee:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     af2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     af6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     afa:	87 7f       	andi	r24, 0xF7	; 247
     afc:	86 c0       	rjmp	.+268    	; 0xc0a <USB_Device_ProcessControlRequest+0x1fc>
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     afe:	81 11       	cpse	r24, r1
     b00:	b7 c0       	rjmp	.+366    	; 0xc70 <USB_Device_ProcessControlRequest+0x262>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     b02:	10 91 70 02 	lds	r17, 0x0270	; 0x800270 <USB_ControlRequest+0x2>
     b06:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     b08:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b0a:	f8 94       	cli
     b0c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     b10:	87 7f       	andi	r24, 0xF7	; 247
     b12:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
     b16:	00 de       	rcall	.-1024   	; 0x718 <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

		while (!(Endpoint_IsINReady()));
     b1c:	80 ff       	sbrs	r24, 0
     b1e:	fc cf       	rjmp	.-8      	; 0xb18 <USB_Device_ProcessControlRequest+0x10a>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b20:	11 11       	cpse	r17, r1
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <USB_Device_ProcessControlRequest+0x11a>
     b24:	82 e0       	ldi	r24, 0x02	; 2
     b26:	01 c0       	rjmp	.+2      	; 0xb2a <USB_Device_ProcessControlRequest+0x11c>
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	8e bb       	out	0x1e, r24	; 30
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
     b2c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
     b30:	80 78       	andi	r24, 0x80	; 128
     b32:	18 2b       	or	r17, r24
     b34:	10 93 e3 00 	sts	0x00E3, r17	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
				UDADDR |= (1 << ADDEN);
     b38:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
     b3c:	80 68       	ori	r24, 0x80	; 128
     b3e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b42:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
     b44:	86 c0       	rjmp	.+268    	; 0xc52 <USB_Device_ProcessControlRequest+0x244>
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b46:	80 58       	subi	r24, 0x80	; 128
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	08 f0       	brcs	.+2      	; 0xb4e <USB_Device_ProcessControlRequest+0x140>
     b4c:	91 c0       	rjmp	.+290    	; 0xc70 <USB_Device_ProcessControlRequest+0x262>
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     b4e:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <USB_ControlRequest+0x2>
     b52:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <USB_ControlRequest+0x3>
     b56:	8c 3d       	cpi	r24, 0xDC	; 220
     b58:	53 e0       	ldi	r21, 0x03	; 3
     b5a:	95 07       	cpc	r25, r21
     b5c:	79 f5       	brne	.+94     	; 0xbbc <USB_Device_ProcessControlRequest+0x1ae>
	{
		USB_Descriptor_Header_t Header;
		int16_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
     b62:	8a e2       	ldi	r24, 0x2A	; 42
     b64:	89 83       	std	Y+1, r24	; 0x01

	uint8_t SigReadAddress = 0x0E;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     b66:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b68:	f8 94       	cli
     b6a:	de 01       	movw	r26, r28
     b6c:	13 96       	adiw	r26, 0x03	; 3
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	2e e0       	ldi	r18, 0x0E	; 14
	{
		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     b72:	41 e2       	ldi	r20, 0x21	; 33
     b74:	e2 2f       	mov	r30, r18
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x7fc057>
     b7c:	e4 91       	lpm	r30, Z

			if (SerialCharNum & 0x01)
     b7e:	90 ff       	sbrs	r25, 0
     b80:	03 c0       	rjmp	.+6      	; 0xb88 <USB_Device_ProcessControlRequest+0x17a>
			{
				SerialByte >>= 4;
     b82:	e2 95       	swap	r30
     b84:	ef 70       	andi	r30, 0x0F	; 15
				SigReadAddress++;
     b86:	2f 5f       	subi	r18, 0xFF	; 255
}

#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
static char USB_Device_NibbleToASCII(uint8_t Nibble)
{
	Nibble = ((Nibble & 0x0F) + '0');
     b88:	ef 70       	andi	r30, 0x0F	; 15
     b8a:	80 e3       	ldi	r24, 0x30	; 48
     b8c:	8e 0f       	add	r24, r30
	return (Nibble > '9') ? (Nibble + ('A' - '9' - 1)) : Nibble;
     b8e:	8a 33       	cpi	r24, 0x3A	; 58
     b90:	10 f0       	brcs	.+4      	; 0xb96 <USB_Device_ProcessControlRequest+0x188>
     b92:	e9 5c       	subi	r30, 0xC9	; 201
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <USB_Device_ProcessControlRequest+0x18a>
     b96:	e8 2f       	mov	r30, r24
			{
				SerialByte >>= 4;
				SigReadAddress++;
			}

			SignatureDescriptor.UnicodeString[SerialCharNum] = USB_Device_NibbleToASCII(SerialByte);
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	ed 93       	st	X+, r30
     b9c:	fd 93       	st	X+, r31

	uint8_t SigReadAddress = 0x0E;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
     b9e:	9f 5f       	subi	r25, 0xFF	; 255
     ba0:	94 31       	cpi	r25, 0x14	; 20
     ba2:	41 f7       	brne	.-48     	; 0xb74 <USB_Device_ProcessControlRequest+0x166>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ba4:	3f bf       	out	0x3f, r19	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ba6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     baa:	87 7f       	andi	r24, 0xF7	; 247
     bac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		}
	}

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     bb0:	6a e2       	ldi	r22, 0x2A	; 42
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	ce 01       	movw	r24, r28
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	69 d0       	rcall	.+210    	; 0xc8c <Endpoint_Write_Control_Stream_LE>
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <USB_Device_ProcessControlRequest+0x1d2>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     bbc:	ae 01       	movw	r20, r28
     bbe:	4f 5f       	subi	r20, 0xFF	; 255
     bc0:	5f 4f       	sbci	r21, 0xFF	; 255
     bc2:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <USB_ControlRequest+0x4>
     bc6:	65 dd       	rcall	.-1334   	; 0x692 <CALLBACK_USB_GetDescriptor>
     bc8:	bc 01       	movw	r22, r24
     bca:	89 2b       	or	r24, r25
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <USB_Device_ProcessControlRequest+0x1c2>
     bce:	41 c0       	rjmp	.+130    	; 0xc52 <USB_Device_ProcessControlRequest+0x244>
     bd0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     bd4:	97 7f       	andi	r25, 0xF7	; 247
     bd6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	9a 81       	ldd	r25, Y+2	; 0x02
     bde:	ae d0       	rcall	.+348    	; 0xd3c <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     be0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     be4:	8b 77       	andi	r24, 0x7B	; 123
     be6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     bea:	33 c0       	rjmp	.+102    	; 0xc52 <USB_Device_ProcessControlRequest+0x244>
				RequestHandled = true;
			}

			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     bec:	80 38       	cpi	r24, 0x80	; 128
     bee:	09 f0       	breq	.+2      	; 0xbf2 <USB_Device_ProcessControlRequest+0x1e4>
     bf0:	3f c0       	rjmp	.+126    	; 0xc70 <USB_Device_ProcessControlRequest+0x262>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bf2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     bf6:	87 7f       	andi	r24, 0xF7	; 247
     bf8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
     bfc:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <USB_ConfigurationNumber>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     c00:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c04:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     c08:	8e 77       	andi	r24, 0x7E	; 126
     c0a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     c0e:	84 dd       	rcall	.-1272   	; 0x718 <Endpoint_ClearStatusStage>
     c10:	20 c0       	rjmp	.+64     	; 0xc52 <USB_Device_ProcessControlRequest+0x244>
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c12:	81 11       	cpse	r24, r1
     c14:	2d c0       	rjmp	.+90     	; 0xc70 <USB_Device_ProcessControlRequest+0x262>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     c16:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <USB_ControlRequest+0x2>
     c1a:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <USB_ControlRequest+0x3>
     c1e:	99 27       	eor	r25, r25
     c20:	02 97       	sbiw	r24, 0x02	; 2
     c22:	bc f4       	brge	.+46     	; 0xc52 <USB_Device_ProcessControlRequest+0x244>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     c28:	87 7f       	andi	r24, 0xF7	; 247
     c2a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c2e:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <USB_ControlRequest+0x2>
     c32:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <USB_ConfigurationNumber>

	Endpoint_ClearStatusStage();
     c36:	70 dd       	rcall	.-1312   	; 0x718 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
     c38:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <USB_ConfigurationNumber>
     c3c:	81 11       	cpse	r24, r1
     c3e:	06 c0       	rjmp	.+12     	; 0xc4c <USB_Device_ProcessControlRequest+0x23e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     c40:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c44:	87 fd       	sbrc	r24, 7
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <USB_Device_ProcessControlRequest+0x23e>
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	01 c0       	rjmp	.+2      	; 0xc4e <USB_Device_ProcessControlRequest+0x240>
     c4c:	84 e0       	ldi	r24, 0x04	; 4

	EVENT_USB_Device_ConfigurationChanged();
     c4e:	8e bb       	out	0x1e, r24	; 30
     c50:	9c dc       	rcall	.-1736   	; 0x58a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c52:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();

	if (Endpoint_IsSETUPReceived())
     c56:	83 ff       	sbrs	r24, 3
     c58:	0d c0       	rjmp	.+26     	; 0xc74 <USB_Device_ProcessControlRequest+0x266>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c5a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     c5e:	80 62       	ori	r24, 0x20	; 32
     c60:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c64:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     c68:	87 7f       	andi	r24, 0xF7	; 247
     c6a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <USB_Device_ProcessControlRequest+0x266>
     c70:	8f dc       	rcall	.-1762   	; 0x590 <EVENT_USB_Device_UnhandledControlRequest>
     c72:	ef cf       	rjmp	.-34     	; 0xc52 <USB_Device_ProcessControlRequest+0x244>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     c74:	aa 96       	adiw	r28, 0x2a	; 42
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	1f 91       	pop	r17
     c86:	0f 91       	pop	r16
     c88:	08 95       	ret

00000c8a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     c8a:	08 95       	ret

00000c8c <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     c8c:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <USB_ControlRequest+0x6>
     c90:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <USB_ControlRequest+0x7>
     c94:	26 17       	cp	r18, r22
     c96:	37 07       	cpc	r19, r23
     c98:	48 f0       	brcs	.+18     	; 0xcac <Endpoint_Write_Control_Stream_LE+0x20>
     c9a:	61 15       	cp	r22, r1
     c9c:	71 05       	cpc	r23, r1
     c9e:	39 f4       	brne	.+14     	; 0xcae <Endpoint_Write_Control_Stream_LE+0x22>
     ca0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     ca4:	2e 77       	andi	r18, 0x7E	; 126
     ca6:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     caa:	01 c0       	rjmp	.+2      	; 0xcae <Endpoint_Write_Control_Stream_LE+0x22>
     cac:	b9 01       	movw	r22, r18
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	61 15       	cp	r22, r1
     cb2:	71 05       	cpc	r23, r1
     cb4:	79 f1       	breq	.+94     	; 0xd14 <Endpoint_Write_Control_Stream_LE+0x88>
     cb6:	2e b3       	in	r18, 0x1e	; 30
     cb8:	22 23       	and	r18, r18
     cba:	e1 f1       	breq	.+120    	; 0xd34 <Endpoint_Write_Control_Stream_LE+0xa8>
     cbc:	25 30       	cpi	r18, 0x05	; 5
     cbe:	e1 f1       	breq	.+120    	; 0xd38 <Endpoint_Write_Control_Stream_LE+0xac>
     cc0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     cc4:	23 fd       	sbrc	r18, 3
     cc6:	34 c0       	rjmp	.+104    	; 0xd30 <Endpoint_Write_Control_Stream_LE+0xa4>
     cc8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     ccc:	22 fd       	sbrc	r18, 2
     cce:	2a c0       	rjmp	.+84     	; 0xd24 <Endpoint_Write_Control_Stream_LE+0x98>
     cd0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     cd4:	20 ff       	sbrs	r18, 0
     cd6:	ec cf       	rjmp	.-40     	; 0xcb0 <Endpoint_Write_Control_Stream_LE+0x24>
     cd8:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	fc 01       	movw	r30, r24
     ce0:	cf 01       	movw	r24, r30
     ce2:	61 15       	cp	r22, r1
     ce4:	71 05       	cpc	r23, r1
     ce6:	59 f0       	breq	.+22     	; 0xcfe <Endpoint_Write_Control_Stream_LE+0x72>
     ce8:	28 30       	cpi	r18, 0x08	; 8
     cea:	31 05       	cpc	r19, r1
     cec:	40 f4       	brcc	.+16     	; 0xcfe <Endpoint_Write_Control_Stream_LE+0x72>
     cee:	81 91       	ld	r24, Z+
     cf0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     cf4:	61 50       	subi	r22, 0x01	; 1
     cf6:	71 09       	sbc	r23, r1
     cf8:	2f 5f       	subi	r18, 0xFF	; 255
     cfa:	3f 4f       	sbci	r19, 0xFF	; 255
     cfc:	f1 cf       	rjmp	.-30     	; 0xce0 <Endpoint_Write_Control_Stream_LE+0x54>
     cfe:	41 e0       	ldi	r20, 0x01	; 1
     d00:	28 30       	cpi	r18, 0x08	; 8
     d02:	31 05       	cpc	r19, r1
     d04:	09 f0       	breq	.+2      	; 0xd08 <Endpoint_Write_Control_Stream_LE+0x7c>
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     d0c:	2e 77       	andi	r18, 0x7E	; 126
     d0e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     d12:	ce cf       	rjmp	.-100    	; 0xcb0 <Endpoint_Write_Control_Stream_LE+0x24>
     d14:	41 11       	cpse	r20, r1
     d16:	cf cf       	rjmp	.-98     	; 0xcb6 <Endpoint_Write_Control_Stream_LE+0x2a>
     d18:	05 c0       	rjmp	.+10     	; 0xd24 <Endpoint_Write_Control_Stream_LE+0x98>
     d1a:	8e b3       	in	r24, 0x1e	; 30
     d1c:	88 23       	and	r24, r24
     d1e:	51 f0       	breq	.+20     	; 0xd34 <Endpoint_Write_Control_Stream_LE+0xa8>
     d20:	85 30       	cpi	r24, 0x05	; 5
     d22:	51 f0       	breq	.+20     	; 0xd38 <Endpoint_Write_Control_Stream_LE+0xac>
     d24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     d28:	82 ff       	sbrs	r24, 2
     d2a:	f7 cf       	rjmp	.-18     	; 0xd1a <Endpoint_Write_Control_Stream_LE+0x8e>
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	08 95       	ret
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	08 95       	ret
     d34:	82 e0       	ldi	r24, 0x02	; 2
     d36:	08 95       	ret
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	08 95       	ret

00000d3c <Endpoint_Write_Control_PStream_LE>:
     d3c:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <USB_ControlRequest+0x6>
     d40:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <USB_ControlRequest+0x7>
     d44:	26 17       	cp	r18, r22
     d46:	37 07       	cpc	r19, r23
     d48:	48 f0       	brcs	.+18     	; 0xd5c <Endpoint_Write_Control_PStream_LE+0x20>
     d4a:	61 15       	cp	r22, r1
     d4c:	71 05       	cpc	r23, r1
     d4e:	39 f4       	brne	.+14     	; 0xd5e <Endpoint_Write_Control_PStream_LE+0x22>
     d50:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     d54:	2e 77       	andi	r18, 0x7E	; 126
     d56:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     d5a:	01 c0       	rjmp	.+2      	; 0xd5e <Endpoint_Write_Control_PStream_LE+0x22>
     d5c:	b9 01       	movw	r22, r18
     d5e:	40 e0       	ldi	r20, 0x00	; 0
     d60:	61 15       	cp	r22, r1
     d62:	71 05       	cpc	r23, r1
     d64:	91 f1       	breq	.+100    	; 0xdca <Endpoint_Write_Control_PStream_LE+0x8e>
     d66:	2e b3       	in	r18, 0x1e	; 30
     d68:	22 23       	and	r18, r18
     d6a:	09 f4       	brne	.+2      	; 0xd6e <Endpoint_Write_Control_PStream_LE+0x32>
     d6c:	3e c0       	rjmp	.+124    	; 0xdea <Endpoint_Write_Control_PStream_LE+0xae>
     d6e:	25 30       	cpi	r18, 0x05	; 5
     d70:	09 f4       	brne	.+2      	; 0xd74 <Endpoint_Write_Control_PStream_LE+0x38>
     d72:	3d c0       	rjmp	.+122    	; 0xdee <Endpoint_Write_Control_PStream_LE+0xb2>
     d74:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     d78:	23 fd       	sbrc	r18, 3
     d7a:	35 c0       	rjmp	.+106    	; 0xde6 <Endpoint_Write_Control_PStream_LE+0xaa>
     d7c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     d80:	22 fd       	sbrc	r18, 2
     d82:	2b c0       	rjmp	.+86     	; 0xdda <Endpoint_Write_Control_PStream_LE+0x9e>
     d84:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     d88:	20 ff       	sbrs	r18, 0
     d8a:	ea cf       	rjmp	.-44     	; 0xd60 <Endpoint_Write_Control_PStream_LE+0x24>
     d8c:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	fc 01       	movw	r30, r24
     d94:	cf 01       	movw	r24, r30
     d96:	61 15       	cp	r22, r1
     d98:	71 05       	cpc	r23, r1
     d9a:	61 f0       	breq	.+24     	; 0xdb4 <Endpoint_Write_Control_PStream_LE+0x78>
     d9c:	28 30       	cpi	r18, 0x08	; 8
     d9e:	31 05       	cpc	r19, r1
     da0:	48 f4       	brcc	.+18     	; 0xdb4 <Endpoint_Write_Control_PStream_LE+0x78>
     da2:	84 91       	lpm	r24, Z
     da4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     da8:	61 50       	subi	r22, 0x01	; 1
     daa:	71 09       	sbc	r23, r1
     dac:	2f 5f       	subi	r18, 0xFF	; 255
     dae:	3f 4f       	sbci	r19, 0xFF	; 255
     db0:	31 96       	adiw	r30, 0x01	; 1
     db2:	f0 cf       	rjmp	.-32     	; 0xd94 <Endpoint_Write_Control_PStream_LE+0x58>
     db4:	41 e0       	ldi	r20, 0x01	; 1
     db6:	28 30       	cpi	r18, 0x08	; 8
     db8:	31 05       	cpc	r19, r1
     dba:	09 f0       	breq	.+2      	; 0xdbe <Endpoint_Write_Control_PStream_LE+0x82>
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     dc2:	2e 77       	andi	r18, 0x7E	; 126
     dc4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     dc8:	cb cf       	rjmp	.-106    	; 0xd60 <Endpoint_Write_Control_PStream_LE+0x24>
     dca:	41 11       	cpse	r20, r1
     dcc:	cc cf       	rjmp	.-104    	; 0xd66 <Endpoint_Write_Control_PStream_LE+0x2a>
     dce:	05 c0       	rjmp	.+10     	; 0xdda <Endpoint_Write_Control_PStream_LE+0x9e>
     dd0:	8e b3       	in	r24, 0x1e	; 30
     dd2:	88 23       	and	r24, r24
     dd4:	51 f0       	breq	.+20     	; 0xdea <Endpoint_Write_Control_PStream_LE+0xae>
     dd6:	85 30       	cpi	r24, 0x05	; 5
     dd8:	51 f0       	breq	.+20     	; 0xdee <Endpoint_Write_Control_PStream_LE+0xb2>
     dda:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     dde:	82 ff       	sbrs	r24, 2
     de0:	f7 cf       	rjmp	.-18     	; 0xdd0 <Endpoint_Write_Control_PStream_LE+0x94>
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	08 95       	ret
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	08 95       	ret
     dea:	82 e0       	ldi	r24, 0x02	; 2
     dec:	08 95       	ret
     dee:	83 e0       	ldi	r24, 0x03	; 3
     df0:	08 95       	ret

00000df2 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     df2:	61 15       	cp	r22, r1
     df4:	71 05       	cpc	r23, r1
     df6:	29 f4       	brne	.+10     	; 0xe02 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     df8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     dfc:	2b 77       	andi	r18, 0x7B	; 123
     dfe:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	  Endpoint_ClearOUT();

	while (Length)
     e02:	61 15       	cp	r22, r1
     e04:	71 05       	cpc	r23, r1
     e06:	01 f1       	breq	.+64     	; 0xe48 <Endpoint_Read_Control_Stream_LE+0x56>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e08:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e0a:	22 23       	and	r18, r18
     e0c:	29 f1       	breq	.+74     	; 0xe58 <Endpoint_Read_Control_Stream_LE+0x66>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e0e:	25 30       	cpi	r18, 0x05	; 5
     e10:	29 f1       	breq	.+74     	; 0xe5c <Endpoint_Read_Control_Stream_LE+0x6a>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e12:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     e16:	23 fd       	sbrc	r18, 3
     e18:	1d c0       	rjmp	.+58     	; 0xe54 <Endpoint_Read_Control_Stream_LE+0x62>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e1a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     e1e:	22 ff       	sbrs	r18, 2
     e20:	f0 cf       	rjmp	.-32     	; 0xe02 <Endpoint_Read_Control_Stream_LE+0x10>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     e22:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
		{
			while (Length && Endpoint_BytesInEndpoint())
     e26:	22 23       	and	r18, r18
     e28:	39 f3       	breq	.-50     	; 0xdf8 <Endpoint_Read_Control_Stream_LE+0x6>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     e2a:	01 96       	adiw	r24, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     e2c:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     e30:	fc 01       	movw	r30, r24
     e32:	31 97       	sbiw	r30, 0x01	; 1
     e34:	20 83       	st	Z, r18
				Length--;
     e36:	61 50       	subi	r22, 0x01	; 1
     e38:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     e3a:	99 f7       	brne	.-26     	; 0xe22 <Endpoint_Read_Control_Stream_LE+0x30>
     e3c:	dd cf       	rjmp	.-70     	; 0xdf8 <Endpoint_Read_Control_Stream_LE+0x6>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e3e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e40:	88 23       	and	r24, r24
     e42:	51 f0       	breq	.+20     	; 0xe58 <Endpoint_Read_Control_Stream_LE+0x66>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e44:	85 30       	cpi	r24, 0x05	; 5
     e46:	51 f0       	breq	.+20     	; 0xe5c <Endpoint_Read_Control_Stream_LE+0x6a>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     e4c:	80 ff       	sbrs	r24, 0
     e4e:	f7 cf       	rjmp	.-18     	; 0xe3e <Endpoint_Read_Control_Stream_LE+0x4c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     e5c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     e5e:	08 95       	ret

00000e60 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     e60:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     e62:	8e b3       	in	r24, 0x1e	; 30
     e64:	88 23       	and	r24, r24
     e66:	59 f0       	breq	.+22     	; 0xe7e <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     e68:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     e6c:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e6e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     e76:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
     e78:	ca dd       	rcall	.-1132   	; 0xa0e <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e7a:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
     e7e:	cf 91       	pop	r28
     e80:	08 95       	ret

00000e82 <CDC_Device_Event_Stub>:
	}
	else
	{
		return 0;
	}
}
     e82:	08 95       	ret

00000e84 <CDC_Device_ProcessControlRequest>:
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     e8c:	23 ff       	sbrs	r18, 3
     e8e:	67 c0       	rjmp	.+206    	; 0xf5e <CDC_Device_ProcessControlRequest+0xda>
     e90:	fc 01       	movw	r30, r24
     e92:	20 81       	ld	r18, Z
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	40 91 72 02 	lds	r20, 0x0272	; 0x800272 <USB_ControlRequest+0x4>
     e9a:	50 91 73 02 	lds	r21, 0x0273	; 0x800273 <USB_ControlRequest+0x5>
     e9e:	42 17       	cp	r20, r18
     ea0:	53 07       	cpc	r21, r19
     ea2:	09 f0       	breq	.+2      	; 0xea6 <CDC_Device_ProcessControlRequest+0x22>
     ea4:	5c c0       	rjmp	.+184    	; 0xf5e <CDC_Device_ProcessControlRequest+0xda>
     ea6:	ec 01       	movw	r28, r24
     ea8:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <USB_ControlRequest+0x1>
     eac:	81 32       	cpi	r24, 0x21	; 33
     eae:	51 f0       	breq	.+20     	; 0xec4 <CDC_Device_ProcessControlRequest+0x40>
     eb0:	18 f4       	brcc	.+6      	; 0xeb8 <CDC_Device_ProcessControlRequest+0x34>
     eb2:	80 32       	cpi	r24, 0x20	; 32
     eb4:	e1 f0       	breq	.+56     	; 0xeee <CDC_Device_ProcessControlRequest+0x6a>
     eb6:	53 c0       	rjmp	.+166    	; 0xf5e <CDC_Device_ProcessControlRequest+0xda>
     eb8:	82 32       	cpi	r24, 0x22	; 34
     eba:	81 f1       	breq	.+96     	; 0xf1c <CDC_Device_ProcessControlRequest+0x98>
     ebc:	83 32       	cpi	r24, 0x23	; 35
     ebe:	09 f4       	brne	.+2      	; 0xec2 <CDC_Device_ProcessControlRequest+0x3e>
     ec0:	3e c0       	rjmp	.+124    	; 0xf3e <CDC_Device_ProcessControlRequest+0xba>
     ec2:	4d c0       	rjmp	.+154    	; 0xf5e <CDC_Device_ProcessControlRequest+0xda>
     ec4:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <USB_ControlRequest>
     ec8:	81 3a       	cpi	r24, 0xA1	; 161
     eca:	09 f0       	breq	.+2      	; 0xece <CDC_Device_ProcessControlRequest+0x4a>
     ecc:	48 c0       	rjmp	.+144    	; 0xf5e <CDC_Device_ProcessControlRequest+0xda>
     ece:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     ed2:	87 7f       	andi	r24, 0xF7	; 247
     ed4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     ed8:	67 e0       	ldi	r22, 0x07	; 7
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	cf 01       	movw	r24, r30
     ede:	0f 96       	adiw	r24, 0x0f	; 15
     ee0:	d5 de       	rcall	.-598    	; 0xc8c <Endpoint_Write_Control_Stream_LE>
     ee2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     ee6:	8b 77       	andi	r24, 0x7B	; 123
     ee8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     eec:	38 c0       	rjmp	.+112    	; 0xf5e <CDC_Device_ProcessControlRequest+0xda>
     eee:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <USB_ControlRequest>
     ef2:	81 32       	cpi	r24, 0x21	; 33
     ef4:	a1 f5       	brne	.+104    	; 0xf5e <CDC_Device_ProcessControlRequest+0xda>
     ef6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     efa:	87 7f       	andi	r24, 0xF7	; 247
     efc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     f00:	67 e0       	ldi	r22, 0x07	; 7
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	cf 01       	movw	r24, r30
     f06:	0f 96       	adiw	r24, 0x0f	; 15
     f08:	74 df       	rcall	.-280    	; 0xdf2 <Endpoint_Read_Control_Stream_LE>
     f0a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     f0e:	8e 77       	andi	r24, 0x7E	; 126
     f10:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     f14:	ce 01       	movw	r24, r28
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	3d cb       	rjmp	.-2438   	; 0x596 <EVENT_CDC_Device_LineEncodingChanged>
     f1c:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <USB_ControlRequest>
     f20:	81 32       	cpi	r24, 0x21	; 33
     f22:	e9 f4       	brne	.+58     	; 0xf5e <CDC_Device_ProcessControlRequest+0xda>
     f24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     f28:	87 7f       	andi	r24, 0xF7	; 247
     f2a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     f2e:	f4 db       	rcall	.-2072   	; 0x718 <Endpoint_ClearStatusStage>
     f30:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <USB_ControlRequest+0x2>
     f34:	8d 87       	std	Y+13, r24	; 0x0d
     f36:	ce 01       	movw	r24, r28
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	6d cb       	rjmp	.-2342   	; 0x618 <EVENT_CDC_Device_ControLineStateChanged>
     f3e:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <USB_ControlRequest>
     f42:	81 32       	cpi	r24, 0x21	; 33
     f44:	61 f4       	brne	.+24     	; 0xf5e <CDC_Device_ProcessControlRequest+0xda>
     f46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     f4a:	87 7f       	andi	r24, 0xF7	; 247
     f4c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     f50:	e3 db       	rcall	.-2106   	; 0x718 <Endpoint_ClearStatusStage>
     f52:	60 91 70 02 	lds	r22, 0x0270	; 0x800270 <USB_ControlRequest+0x2>
     f56:	ce 01       	movw	r24, r28
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	92 cf       	rjmp	.-220    	; 0xe82 <CDC_Device_Event_Stub>
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	08 95       	ret

00000f64 <CDC_Device_ConfigureEndpoints>:
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	ec 01       	movw	r28, r24
     f6c:	fc 01       	movw	r30, r24
     f6e:	3d 96       	adiw	r30, 0x0d	; 13
     f70:	89 e0       	ldi	r24, 0x09	; 9
     f72:	df 01       	movw	r26, r30
     f74:	1d 92       	st	X+, r1
     f76:	8a 95       	dec	r24
     f78:	e9 f7       	brne	.-6      	; 0xf74 <CDC_Device_ConfigureEndpoints+0x10>
     f7a:	11 e0       	ldi	r17, 0x01	; 1
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	81 13       	cpse	r24, r17
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <CDC_Device_ConfigureEndpoints+0x28>
     f82:	ea 81       	ldd	r30, Y+2	; 0x02
     f84:	fb 81       	ldd	r31, Y+3	; 0x03
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	07 c0       	rjmp	.+14     	; 0xf9a <CDC_Device_ConfigureEndpoints+0x36>
     f8c:	8d 81       	ldd	r24, Y+5	; 0x05
     f8e:	81 13       	cpse	r24, r17
     f90:	06 c0       	rjmp	.+12     	; 0xf9e <CDC_Device_ConfigureEndpoints+0x3a>
     f92:	ee 81       	ldd	r30, Y+6	; 0x06
     f94:	ff 81       	ldd	r31, Y+7	; 0x07
     f96:	88 85       	ldd	r24, Y+8	; 0x08
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	62 e0       	ldi	r22, 0x02	; 2
     f9c:	0d c0       	rjmp	.+26     	; 0xfb8 <CDC_Device_ConfigureEndpoints+0x54>
     f9e:	89 85       	ldd	r24, Y+9	; 0x09
     fa0:	81 17       	cp	r24, r17
     fa2:	29 f0       	breq	.+10     	; 0xfae <CDC_Device_ConfigureEndpoints+0x4a>
     fa4:	1f 5f       	subi	r17, 0xFF	; 255
     fa6:	15 30       	cpi	r17, 0x05	; 5
     fa8:	49 f7       	brne	.-46     	; 0xf7c <CDC_Device_ConfigureEndpoints+0x18>
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	1e c0       	rjmp	.+60     	; 0xfea <CDC_Device_ConfigureEndpoints+0x86>
     fae:	ea 85       	ldd	r30, Y+10	; 0x0a
     fb0:	fb 85       	ldd	r31, Y+11	; 0x0b
     fb2:	8c 85       	ldd	r24, Y+12	; 0x0c
     fb4:	91 e0       	ldi	r25, 0x01	; 1
     fb6:	63 e0       	ldi	r22, 0x03	; 3
     fb8:	81 11       	cpse	r24, r1
     fba:	84 e0       	ldi	r24, 0x04	; 4
     fbc:	28 e0       	ldi	r18, 0x08	; 8
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	40 e0       	ldi	r20, 0x00	; 0
     fc2:	2e 17       	cp	r18, r30
     fc4:	3f 07       	cpc	r19, r31
     fc6:	20 f4       	brcc	.+8      	; 0xfd0 <CDC_Device_ConfigureEndpoints+0x6c>
     fc8:	4f 5f       	subi	r20, 0xFF	; 255
     fca:	22 0f       	add	r18, r18
     fcc:	33 1f       	adc	r19, r19
     fce:	f9 cf       	rjmp	.-14     	; 0xfc2 <CDC_Device_ConfigureEndpoints+0x5e>
     fd0:	42 95       	swap	r20
     fd2:	40 7f       	andi	r20, 0xF0	; 240
     fd4:	82 60       	ori	r24, 0x02	; 2
     fd6:	48 2b       	or	r20, r24
     fd8:	62 95       	swap	r22
     fda:	66 0f       	add	r22, r22
     fdc:	66 0f       	add	r22, r22
     fde:	60 7c       	andi	r22, 0xC0	; 192
     fe0:	69 2b       	or	r22, r25
     fe2:	81 2f       	mov	r24, r17
     fe4:	86 db       	rcall	.-2292   	; 0x6f2 <Endpoint_ConfigureEndpoint_Prv>
     fe6:	81 11       	cpse	r24, r1
     fe8:	dd cf       	rjmp	.-70     	; 0xfa4 <CDC_Device_ConfigureEndpoints+0x40>
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
     ff0:	08 95       	ret

00000ff2 <CDC_Device_SendByte>:
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	2e b3       	in	r18, 0x1e	; 30
     ffa:	24 30       	cpi	r18, 0x04	; 4
     ffc:	f1 f4       	brne	.+60     	; 0x103a <CDC_Device_SendByte+0x48>
     ffe:	fc 01       	movw	r30, r24
    1000:	07 85       	ldd	r16, Z+15	; 0x0f
    1002:	10 89       	ldd	r17, Z+16	; 0x10
    1004:	21 89       	ldd	r18, Z+17	; 0x11
    1006:	32 89       	ldd	r19, Z+18	; 0x12
    1008:	01 2b       	or	r16, r17
    100a:	02 2b       	or	r16, r18
    100c:	03 2b       	or	r16, r19
    100e:	a9 f0       	breq	.+42     	; 0x103a <CDC_Device_SendByte+0x48>
    1010:	c6 2f       	mov	r28, r22
    1012:	81 81       	ldd	r24, Z+1	; 0x01
    1014:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
    1018:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    101c:	85 ff       	sbrs	r24, 5
    101e:	04 c0       	rjmp	.+8      	; 0x1028 <CDC_Device_SendByte+0x36>
    1020:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	0a c0       	rjmp	.+20     	; 0x103c <CDC_Device_SendByte+0x4a>
    1028:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    102c:	8e 77       	andi	r24, 0x7E	; 126
    102e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1032:	8f db       	rcall	.-2274   	; 0x752 <Endpoint_WaitUntilReady>
    1034:	88 23       	and	r24, r24
    1036:	a1 f3       	breq	.-24     	; 0x1020 <CDC_Device_SendByte+0x2e>
    1038:	01 c0       	rjmp	.+2      	; 0x103c <CDC_Device_SendByte+0x4a>
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	08 95       	ret

00001044 <CDC_Device_Flush>:
    1044:	2e b3       	in	r18, 0x1e	; 30
    1046:	24 30       	cpi	r18, 0x04	; 4
    1048:	19 f5       	brne	.+70     	; 0x1090 <CDC_Device_Flush+0x4c>
    104a:	fc 01       	movw	r30, r24
    104c:	47 85       	ldd	r20, Z+15	; 0x0f
    104e:	50 89       	ldd	r21, Z+16	; 0x10
    1050:	61 89       	ldd	r22, Z+17	; 0x11
    1052:	72 89       	ldd	r23, Z+18	; 0x12
    1054:	45 2b       	or	r20, r21
    1056:	46 2b       	or	r20, r22
    1058:	47 2b       	or	r20, r23
    105a:	d1 f0       	breq	.+52     	; 0x1090 <CDC_Device_Flush+0x4c>
    105c:	81 81       	ldd	r24, Z+1	; 0x01
    105e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
    1062:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
    1066:	88 23       	and	r24, r24
    1068:	89 f0       	breq	.+34     	; 0x108c <CDC_Device_Flush+0x48>
    106a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    106e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1072:	8e 77       	andi	r24, 0x7E	; 126
    1074:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1078:	95 fd       	sbrc	r25, 5
    107a:	08 c0       	rjmp	.+16     	; 0x108c <CDC_Device_Flush+0x48>
    107c:	6a db       	rcall	.-2348   	; 0x752 <Endpoint_WaitUntilReady>
    107e:	81 11       	cpse	r24, r1
    1080:	08 c0       	rjmp	.+16     	; 0x1092 <CDC_Device_Flush+0x4e>
    1082:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1086:	8e 77       	andi	r24, 0x7E	; 126
    1088:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	08 95       	ret
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	08 95       	ret

00001094 <CDC_Device_USBTask>:
    1094:	2e b3       	in	r18, 0x1e	; 30
    1096:	24 30       	cpi	r18, 0x04	; 4
    1098:	51 f4       	brne	.+20     	; 0x10ae <CDC_Device_USBTask+0x1a>
    109a:	fc 01       	movw	r30, r24
    109c:	47 85       	ldd	r20, Z+15	; 0x0f
    109e:	50 89       	ldd	r21, Z+16	; 0x10
    10a0:	61 89       	ldd	r22, Z+17	; 0x11
    10a2:	72 89       	ldd	r23, Z+18	; 0x12
    10a4:	45 2b       	or	r20, r21
    10a6:	46 2b       	or	r20, r22
    10a8:	47 2b       	or	r20, r23
    10aa:	09 f0       	breq	.+2      	; 0x10ae <CDC_Device_USBTask+0x1a>
    10ac:	cb cf       	rjmp	.-106    	; 0x1044 <CDC_Device_Flush>
    10ae:	08 95       	ret

000010b0 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    10b0:	2e b3       	in	r18, 0x1e	; 30
    10b2:	24 30       	cpi	r18, 0x04	; 4
    10b4:	19 f0       	breq	.+6      	; 0x10bc <CDC_Device_ReceiveByte+0xc>
	  return -1;
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	9f ef       	ldi	r25, 0xFF	; 255
    10ba:	08 95       	ret
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    10bc:	fc 01       	movw	r30, r24
    10be:	47 85       	ldd	r20, Z+15	; 0x0f
    10c0:	50 89       	ldd	r21, Z+16	; 0x10
    10c2:	61 89       	ldd	r22, Z+17	; 0x11
    10c4:	72 89       	ldd	r23, Z+18	; 0x12
    10c6:	45 2b       	or	r20, r21
    10c8:	46 2b       	or	r20, r22
    10ca:	47 2b       	or	r20, r23
    10cc:	a1 f3       	breq	.-24     	; 0x10b6 <CDC_Device_ReceiveByte+0x6>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
    10ce:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    10d0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	if (Endpoint_IsOUTReceived())
    10d8:	82 ff       	sbrs	r24, 2
    10da:	ed cf       	rjmp	.-38     	; 0x10b6 <CDC_Device_ReceiveByte+0x6>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    10dc:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
	{
		if (Endpoint_BytesInEndpoint())
    10e0:	88 23       	and	r24, r24
    10e2:	21 f0       	breq	.+8      	; 0x10ec <CDC_Device_ReceiveByte+0x3c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    10e4:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
		  ReceivedByte = Endpoint_Read_Byte();
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <CDC_Device_ReceiveByte+0x40>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    10ec:	2f ef       	ldi	r18, 0xFF	; 255
    10ee:	3f ef       	ldi	r19, 0xFF	; 255
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    10f0:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_Byte();

		if (!(Endpoint_BytesInEndpoint()))
    10f4:	81 11       	cpse	r24, r1
    10f6:	05 c0       	rjmp	.+10     	; 0x1102 <CDC_Device_ReceiveByte+0x52>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    10f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    10fc:	8b 77       	andi	r24, 0x7B	; 123
    10fe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1102:	c9 01       	movw	r24, r18
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    1104:	08 95       	ret

00001106 <__udivmodsi4>:
    1106:	a1 e2       	ldi	r26, 0x21	; 33
    1108:	1a 2e       	mov	r1, r26
    110a:	aa 1b       	sub	r26, r26
    110c:	bb 1b       	sub	r27, r27
    110e:	fd 01       	movw	r30, r26
    1110:	0d c0       	rjmp	.+26     	; 0x112c <__udivmodsi4_ep>

00001112 <__udivmodsi4_loop>:
    1112:	aa 1f       	adc	r26, r26
    1114:	bb 1f       	adc	r27, r27
    1116:	ee 1f       	adc	r30, r30
    1118:	ff 1f       	adc	r31, r31
    111a:	a2 17       	cp	r26, r18
    111c:	b3 07       	cpc	r27, r19
    111e:	e4 07       	cpc	r30, r20
    1120:	f5 07       	cpc	r31, r21
    1122:	20 f0       	brcs	.+8      	; 0x112c <__udivmodsi4_ep>
    1124:	a2 1b       	sub	r26, r18
    1126:	b3 0b       	sbc	r27, r19
    1128:	e4 0b       	sbc	r30, r20
    112a:	f5 0b       	sbc	r31, r21

0000112c <__udivmodsi4_ep>:
    112c:	66 1f       	adc	r22, r22
    112e:	77 1f       	adc	r23, r23
    1130:	88 1f       	adc	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	1a 94       	dec	r1
    1136:	69 f7       	brne	.-38     	; 0x1112 <__udivmodsi4_loop>
    1138:	60 95       	com	r22
    113a:	70 95       	com	r23
    113c:	80 95       	com	r24
    113e:	90 95       	com	r25
    1140:	9b 01       	movw	r18, r22
    1142:	ac 01       	movw	r20, r24
    1144:	bd 01       	movw	r22, r26
    1146:	cf 01       	movw	r24, r30
    1148:	08 95       	ret

0000114a <__tablejump2__>:
    114a:	ee 0f       	add	r30, r30
    114c:	ff 1f       	adc	r31, r31
    114e:	05 90       	lpm	r0, Z+
    1150:	f4 91       	lpm	r31, Z
    1152:	e0 2d       	mov	r30, r0
    1154:	09 94       	ijmp

00001156 <_exit>:
    1156:	f8 94       	cli

00001158 <__stop_program>:
    1158:	ff cf       	rjmp	.-2      	; 0x1158 <__stop_program>
